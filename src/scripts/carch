#!/usr/bin/env bash

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
LAVENDER='\033[38;2;138;79;255m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'
NC='\033[0m'

SCRIPT_DIR="./modules"
LOG_FILE="$HOME/.config/carch/carch.log"
LOG_MODE="false"

CONFIG_DIR="$HOME/.config/carch"
CONFIG_FILE="$CONFIG_DIR/carch.conf"

if [[ -d "/dev/shm" ]]; then
    TMP_DIR="/dev/shm/carch_tmp"
else
    TMP_DIR="/tmp/carch_tmp"
fi
mkdir -p "$TMP_DIR"

cleanup_temp() {
    rm -rf "$TMP_DIR" 2>/dev/null
}

trap cleanup_temp EXIT

setup_logging() {
    mkdir -p "$(dirname "$LOG_FILE")"
    if [[ ! -f "$LOG_FILE" ]]; then
        touch "$LOG_FILE"
    fi
    chmod 644 "$LOG_FILE"
}

log_message() {
    local log_type="$1"
    local message="$2"
    
    if [[ -n "$CARCH_DEBUG" ]] || [[ "$LOG_MODE" == "true" ]] || is_logging_enabled; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') [$log_type] $message" >>"$LOG_FILE"
    fi
}

is_logging_enabled() {
    if [[ -f "$CONFIG_FILE" ]]; then
        if grep -q "^LOGGING_ENABLED=true" "$CONFIG_FILE" 2>/dev/null; then
            return 0
        fi
    fi
    
    return 1
}

enable_logging() {
    mkdir -p "$CONFIG_DIR"
    
    if [[ -f "$CONFIG_FILE" ]]; then
        if grep -q "^LOGGING_ENABLED=true" "$CONFIG_FILE"; then
            echo -e "${YELLOW}Logging is already enabled in $CONFIG_FILE${RESET}"
            echo -e "${CYAN}To disable logging, edit $CONFIG_FILE and change LOGGING_ENABLED=true to LOGGING_ENABLED=false${RESET}"
            return 0
        fi
        
        if grep -q "^LOGGING_ENABLED=false" "$CONFIG_FILE"; then
            sed -i 's/^LOGGING_ENABLED=false/LOGGING_ENABLED=true/' "$CONFIG_FILE"
            echo -e "${GREEN}Logging has been enabled in $CONFIG_FILE${RESET}"
            echo -e "${CYAN}To disable logging, edit $CONFIG_FILE and change LOGGING_ENABLED=true to LOGGING_ENABLED=false${RESET}"
            return 0
        fi
        
        echo -e "\n# Logging settings\nLOGGING_ENABLED=true" >> "$CONFIG_FILE"
        echo -e "${GREEN}Logging has been enabled in $CONFIG_FILE${RESET}"
        echo -e "${CYAN}To disable logging, edit $CONFIG_FILE and change LOGGING_ENABLED=true to LOGGING_ENABLED=false${RESET}"
    else
        generate_config
        sed -i 's/^LOGGING_ENABLED=false/LOGGING_ENABLED=true/' "$CONFIG_FILE"
        echo -e "${GREEN}Logging has been enabled in newly created $CONFIG_FILE${RESET}"
        echo -e "${CYAN}To disable logging, edit $CONFIG_FILE and change LOGGING_ENABLED=true to LOGGING_ENABLED=false${RESET}"
    fi
}

detect_distro() {
    if command -v pacman &> /dev/null; then
        DISTRO="arch"
        echo -e "${YELLOW}Arch Linux${RESET}"
    elif command -v dnf &> /dev/null; then
        DISTRO="fedora"
        echo -e "${YELLOW}Fedora${RESET}"
    else
        DISTRO="unknown"
        echo -e "${RED}Unknown${RESET}"
    fi
}

uninstall_carch() {
    detect_distro
    
    case "$DISTRO" in
        fedora)
            echo "Distro is Fedora"
            echo -e "${YELLOW}Checking if Carch is installed via RPM...${RESET}"
            
            if rpm -q carch &>/dev/null; then
                echo -e "${YELLOW}Carch is installed via RPM. Removing package...${RESET}"
                sudo dnf remove -y carch
                echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
                log_message "INFO" "Carch uninstalled successfully via DNF."
            else
                echo -e "${RED}Carch RPM package not found on the system.${RESET}"
                log_message "WARNING" "Carch not found during uninstall attempt."
            fi
            ;;
        arch)
            echo "Distro is Arch"
            if command -v paru &>/dev/null || command -v yay &>/dev/null; then
                echo -e "${YELLOW}AUR helper found. Checking Carch package...${RESET}"
                if pacman -Qs carch &>/dev/null; then
                    AUR_PACKAGE=$(pacman -Q carch | awk '{print $1}')
                    case "$AUR_PACKAGE" in
                        carch-git)
                            echo "Uninstalling carch-git..."
                            yay -R carch-git --noconfirm || paru -R carch-git --noconfirm
                            ;;
                        carch)
                            echo "Uninstalling carch..."
                            yay -R carch --noconfirm || paru -R carch --noconfirm
                            ;;
                        *)
                            echo "Unknown Carch package installed: $AUR_PACKAGE"
                            ;;
                    esac
                    echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
                    log_message "INFO" "Carch uninstalled successfully from Arch Linux."
                else
                    echo "Carch package not found in the system."
                    log_message "WARNING" "Carch not found during uninstall attempt on Arch Linux."
                fi
            else
                echo -e "${RED}No AUR helper found. To uninstall Carch, please install an AUR helper like paru or yay.${RESET}"
                log_message "ERROR" "No AUR helper found for uninstalling Carch on Arch Linux."
            fi
            ;;
        *)
            echo -e "${RED}Unsupported Distribution: $DISTRO${RESET}"
            log_message "ERROR" "Unsupported distribution during uninstall: $DISTRO"
            exit 1
            ;;
    esac
}

generate_config() {
    mkdir -p "$CONFIG_DIR"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOL
# Carch Configuration File
#  
# List the script names (without the .sh extension) that you want to include in the menu.
#  
# Steps:
# 1. Check which category the scripts fall under (e.g., system, development, terminal, desktop).
# 2. Verify the available scripts using:
#    carch -l or carch --list-scripts
#  
# Example:

terminal/Alacritty
terminal/Kitty
system/Packages

# Display settings
# Set DISABLE_PREVIEW=true to disable script previews in menus
DISABLE_PREVIEW=false

# Logging settings
# Set LOGGING_ENABLED=true to enable permanent logging
LOGGING_ENABLED=false
EOL
        echo -e "${GREEN}Default configuration file created at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Generated default configuration file."
    else
        echo -e "${YELLOW}Configuration file already exists at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Configuration file already exists."
    fi
}

disable_preview() {
    mkdir -p "$CONFIG_DIR"
    
    if [[ -f "$CONFIG_FILE" ]]; then
        if grep -q "^DISABLE_PREVIEW=true" "$CONFIG_FILE"; then
            echo -e "${YELLOW}Preview is already disabled in $CONFIG_FILE${RESET}"
            echo -e "${CYAN}To re-enable previews, edit $CONFIG_FILE and change DISABLE_PREVIEW=true to DISABLE_PREVIEW=false${RESET}"
            return 0
        fi
        
        if grep -q "^DISABLE_PREVIEW=false" "$CONFIG_FILE"; then
            sed -i 's/^DISABLE_PREVIEW=false/DISABLE_PREVIEW=true/' "$CONFIG_FILE"
            echo -e "${GREEN}Preview has been disabled in $CONFIG_FILE${RESET}"
            echo -e "${CYAN}To re-enable previews, edit $CONFIG_FILE and change DISABLE_PREVIEW=true to DISABLE_PREVIEW=false${RESET}"
            return 0
        fi
        
        echo -e "\n# Display settings\nDISABLE_PREVIEW=true" >> "$CONFIG_FILE"
        echo -e "${GREEN}Preview has been disabled in $CONFIG_FILE${RESET}"
        echo -e "${CYAN}To re-enable previews, edit $CONFIG_FILE and change DISABLE_PREVIEW=true to DISABLE_PREVIEW=false${RESET}"
    else
        generate_config
        sed -i 's/^DISABLE_PREVIEW=false/DISABLE_PREVIEW=true/' "$CONFIG_FILE"
        echo -e "${GREEN}Preview has been disabled in newly created $CONFIG_FILE${RESET}"
        echo -e "${CYAN}To re-enable previews, edit $CONFIG_FILE and change DISABLE_PREVIEW=true to DISABLE_PREVIEW=false${RESET}"
    fi
}

is_preview_enabled() {
    if [[ "$NO_PREVIEW" == "true" ]]; then
        return 1
    fi
    
    if [[ -f "$CONFIG_FILE" ]]; then
        if grep -q "^DISABLE_PREVIEW=true" "$CONFIG_FILE" 2>/dev/null; then
            return 1
        fi
    fi
    
    return 0
}

get_installed_version() {
    if command -v carch >/dev/null 2>&1; then
        if command -v pacman >/dev/null 2>&1; then
            pacman_version=$(pacman -Q carch 2>/dev/null | awk '{print $2}')
            if [[ -n "$pacman_version" ]]; then
                echo "$pacman_version"
                return
            fi
        elif command -v rpm >/dev/null 2>&1; then
            rpm_version=$(rpm -q --qf '%{VERSION}' carch 2>/dev/null)
            if [[ $? -eq 0 && -n "$rpm_version" ]]; then
                echo "$rpm_version"
                return
            fi
        fi
        
        carch_path=$(which carch)
        strings "$carch_path" 2>/dev/null | grep -E 'v?[0-9]+\.[0-9]+\.[0-9]+' | head -n1 || echo "unknown"
    else
        echo "not_installed"
    fi
}

load_selected_scripts() {
    scripts=()
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS= read -r script_name; do
            script_name=$(echo "$script_name" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            
            [[ "$script_name" =~ ^#.*$ || -z "$script_name" || 
               "$script_name" =~ ^LOGGING_ENABLED= || 
               "$script_name" =~ ^DISABLE_PREVIEW= ]] && continue
            
            [[ "$script_name" == */* ]] && scripts+=("$script_name")
        done < "$CONFIG_FILE"
    else
        echo -e "${YELLOW}Configuration file not found. Loading all scripts.${RESET}"
        log_message "WARNING" "Configuration file not found. Loading all scripts."
        load_all_scripts
    fi
    scripts+=("Cancel")
}

cache_scripts() {
    SCRIPTS_CACHE_FILE="$CONFIG_DIR/scripts_cache.txt"
    
    if [[ ! -f "$SCRIPTS_CACHE_FILE" ]] || [[ -n "$(find "$SCRIPT_DIR" -type f -name "*.sh" -newer "$SCRIPTS_CACHE_FILE" 2>/dev/null)" ]]; then
        mkdir -p "$CONFIG_DIR"
        find "$SCRIPT_DIR" -type f -name "*.sh" -print > "$SCRIPTS_CACHE_FILE"
        log_message "INFO" "Scripts cache rebuilt"
    fi
    
    return 0
}

load_all_scripts() {
    scripts=()
    cache_scripts
    
    while IFS= read -r file; do
        category=$(dirname "$file" | xargs basename)
        script_name=$(basename "${file}" .sh)
        scripts+=("${category}/${script_name}")
    done < "$SCRIPTS_CACHE_FILE"
    
    scripts+=("Cancel")
}

prompt() {
    echo -e "${YELLOW}Press Enter to return to the menu...${RESET}"
    read -r
}

check_dependencies() {
    local dependencies=("$@")
    local missing=()
    
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}Missing dependencies: ${missing[*]}${RESET}"
        
        echo -e "${YELLOW}You can install these with:${RESET}"
        case "$(detect_distro)" in
            arch)
                echo -e "sudo pacman -S ${missing[*]}"
                ;;
            fedora)
                echo -e "sudo dnf install ${missing[*]}"
                ;;
        esac
        
        return 1
    fi
    
    return 0
}

search_scripts() {
    clear
    local direct_mode="$1"

    local preview_cmd=""
    local preview_window=""
    if is_preview_enabled; then
        preview_cmd="cat $SCRIPT_DIR/{}.sh 2>/dev/null | fold -w 70 || echo 'No preview available'"
        preview_window="--preview-window=right:60%"
    fi
    
    available_scripts=()
    while IFS= read -r -d '' file; do
        category=$(dirname "$file" | xargs basename)
        script_name=$(basename "${file}" .sh)
        available_scripts+=("${category}/${script_name}")
    done < <(find "$SCRIPT_DIR" -type f -name '*.sh' -print0)
    
    while true; do
        echo -e "\n${CYAN}Search Scripts: Press Esc To Exit${RESET}"
        echo -e "${YELLOW}Type to search available scripts...${RESET}"
        
        selected_script=$(printf "%s\n" "${available_scripts[@]}" | fzf --height 50% --border \
               --prompt="Search scripts: " \
               ${preview_cmd:+--preview="$preview_cmd"} \
               ${preview_window})
        
        if [[ -n "$selected_script" ]]; then
            local full_script_path="$SCRIPT_DIR/${selected_script}.sh"
            if [[ -f "$full_script_path" ]]; then
                log_message "INFO" "Starting script: ${selected_script}"
                echo -e "${YELLOW}Running script: ${selected_script}${RESET}"
                
                ( bash "$full_script_path" )
                script_exit_code=$?
                
                if [[ $script_exit_code -eq 0 ]]; then
                    echo -e "${GREEN}Script '${selected_script}' completed successfully.${RESET}"
                    log_message "SUCCESS" "Script '${selected_script}' completed successfully."
                else
                    echo -e "${YELLOW}Script '${selected_script}' encountered an error.${RESET}"
                    log_message "ERROR" "Script '${selected_script}' encountered an error."
                fi
                
                echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
                log_message "INFO" "Logs saved after running script: ${selected_script}"
                
                if [[ "$direct_mode" == "direct" ]]; then
                    read -rp "Press Enter to continue or type 'q' to quit: " user_choice
                    if [[ "$user_choice" == "q" ]]; then
                        clear
                        exit 0
                    else
                        clear
                        continue
                    fi
                else
                    read -p "Press Enter to return to script search... " 
                    clear
                    continue
                fi
            else
                echo -e "${YELLOW}Error: Script '${selected_script}' not found in $SCRIPT_DIR!${RESET}"
                log_message "ERROR" "Script '${selected_script}' not found in $SCRIPT_DIR."
                sleep 2
                clear
                continue
            fi
        else
            if [[ "$direct_mode" != "direct" ]]; then
                prompt
                break
            else
                read -rp "Press Enter to return to script search or type 'q' to quit: " user_choice
                if [[ "$user_choice" == "q" ]]; then
                    clear
                    exit 0
                else
                    clear
                    continue
                fi
            fi
        fi
    done
}

get_latest_version() {
    local REPO="harilvfs/carch"
    local LATEST_VERSION
    local MAX_RETRIES=3
    local TRY=1
    
    while [ $TRY -le $MAX_RETRIES ]; do
        LATEST_VERSION=$(curl -s --max-time 10 "https://api.github.com/repos/$REPO/releases/latest" | 
                        grep -oP '"tag_name":\s*"\K[^"]+' | 
                        sed 's/^v//')
        
        if [ -n "$LATEST_VERSION" ]; then
            echo "$LATEST_VERSION"
            return 0
        fi
        
        TRY=$((TRY + 1))
        sleep 1
    done
    
    log_message "WARNING" "Failed to retrieve latest version information"
    echo "unknown"
}

check_carch_update() {
    local REPO="harilvfs/carch"
    local LATEST_VERSION INSTALLED_VERSION
    
    INSTALLED_VERSION=$(get_installed_version)
    LATEST_VERSION=$(get_latest_version)
    
    if [ "$INSTALLED_VERSION" = "not_installed" ]; then
        echo "Carch is not installed on this system."
        return 1
    fi
    
    if [ "$INSTALLED_VERSION" = "unknown" ] || [ "$LATEST_VERSION" = "unknown" ]; then
        echo "Error: Unable to fetch version information."
        return 1
    fi
    
    if [ "$(printf '%s\n' "$INSTALLED_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$LATEST_VERSION" ]; then
        echo "Update available: Carch $INSTALLED_VERSION → $LATEST_VERSION"
        echo "Run \`carch --update\` to update."
    else
        echo "Carch is up to date ($INSTALLED_VERSION)."
    fi
}

timing_start() {
TIMESTART=$(date +%s.%N)
}

timing_end() {
local operation="$1"
local TIMEEND=$(date +%s.%N)
local TIMEDIFF=$(echo "$TIMEEND - $TIMESTART" | bc)
log_message "PERFORMANCE" "$operation took $TIMEDIFF seconds"
}

display_scripts_menu() {
    timing_start
    check_dependencies "fzf" "bash" "curl" "sed" "grep" || exit 1

    if [[ "$1" == "config" ]]; then
        load_selected_scripts
    else
        load_all_scripts
        if is_logging_enabled; then
            echo -e "${YELLOW}Logging is enabled. Logs will be saved to: ${LOG_FILE}${RESET}"
        fi
        if ! is_preview_enabled; then
            echo -e "${YELLOW}Preview mode is disabled.${RESET}"
        fi
    fi
    
    TERM_WIDTH=$(tput cols 2>/dev/null || echo 80)
    [[ $TERM_WIDTH -lt 60 ]] && TERM_WIDTH=60
    
    local preview_cmd=""
    local preview_window=""
    if is_preview_enabled; then
        preview_cmd="cat $SCRIPT_DIR/{}.sh 2>/dev/null | fold -w 70 || echo 'No preview available'"
        preview_window="--preview-window=right:60%"
    fi
    
    while true; do
        clear
        
        title="CARCH"
        printf "${MAGENTA}%*s%s%*s${NC}\n" $(( (TERM_WIDTH-${#title})/2 )) "" "$title" $(( (TERM_WIDTH-${#title}+1)/2 )) ""
        
        subtitle_text="Automate Your Linux Setup"
        printf "${CYAN}%*s%s%*s${NC}\n" $(( (TERM_WIDTH-${#subtitle_text})/2 )) "" "$subtitle_text" $(( (TERM_WIDTH-${#subtitle_text}+1)/2 )) ""
        
        printf "\n"
        
        info_text="For more info: https://carch-org.github.io/docs/"
        printf "${GREEN}%*s%s%*s${NC}\n\n" $(( (TERM_WIDTH-${#info_text})/2 )) "" "$info_text" $(( (TERM_WIDTH-${#info_text}+1)/2 )) ""
        
        echo -e "${LAVENDER}Select a script to run:${RESET}"
        
        cancel_exists=0
        for script in "${scripts[@]}"; do
            if [[ "$script" == "Cancel" ]]; then
                cancel_exists=1
                break
            fi
        done
        
        if [[ $cancel_exists -eq 0 ]]; then
            all_options=("${scripts[@]}" "Cancel")
        else
            all_options=("${scripts[@]}")
        fi
        
        selected_option=$(printf "%s\n" "${all_options[@]}" | fzf --height 60% --border \
            --prompt="Select a script: " \
            --header="Navigate with arrow keys, Enter to select" \
            ${preview_cmd:+--preview="$preview_cmd"} \
            ${preview_window})
        
        if [[ -z "$selected_option" ]]; then
            continue
        elif [[ "$selected_option" == "Cancel" ]]; then
            clear
            log_message "INFO" "User exited the main menu."
            exit_with_log_message
        else
            run_script "$selected_option"
        fi
    timing_end "display_scripts_menu"
    done
}

run_script() {
    local script_path="$1"
    local category=$(dirname "$script_path")
    local script_name=$(basename "$script_path" .sh)
    local full_script_path="$SCRIPT_DIR/$script_path.sh"
    local tmp_script_path="$TMP_DIR/${script_name}_$(date +%s).sh"

    if [[ -f "$full_script_path" ]]; then
        log_message "INFO" "Starting script: ${script_path}"
        echo -e "${YELLOW}Running script: ${script_path}${RESET}"
        
        cp "$full_script_path" "$tmp_script_path"
        chmod +x "$tmp_script_path"
        
        if bash "$tmp_script_path"; then
            echo -e "${GREEN}Script '${script_path}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_path}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_path}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_path}' encountered an error."
        fi
        
        rm -f "$tmp_script_path"
    else
        echo -e "${YELLOW}Error: Script '${script_path}' not found!${RESET}"
        log_message "ERROR" "Script '${script_path}' not found."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_path}"

    prompt
}

run_script_direct() {
    local script_path="$1"
    local full_script_path="$SCRIPT_DIR/$script_path.sh"
    local tmp_script_path="$TMP_DIR/$(basename "$script_path")_$(date +%s).sh"

    if [[ -f "$full_script_path" ]]; then
        log_message "INFO" "Starting script: ${script_path}"
        echo -e "${YELLOW}Running script: ${script_path}${RESET}"
        
        cp "$full_script_path" "$tmp_script_path"
        chmod +x "$tmp_script_path"
        
        if bash "$tmp_script_path"; then
            echo -e "${GREEN}Script '${script_path}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_path}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_path}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_path}' encountered an error."
        fi
        
        rm -f "$tmp_script_path"
    else
        echo -e "${YELLOW}Error: Script '${script_path}' not found!${RESET}"
        log_message "ERROR" "Script '${script_path}' not found."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_path}"
}

update() {
    detect_distro
    
    local BASE_URL="https://chalisehari.com.np"
    
    case "$DISTRO" in
        fedora)
            echo "Distro is Fedora. Running the Fedora update script..."
            bash <(curl -L "$BASE_URL/fedora")
            ;;
        arch)
            echo "Distro is Arch. Running the Arch update script..."
            bash <(curl -L "$BASE_URL/arch")
            ;;
        *)
            echo -e "${RED}Unsupported Distribution: $DISTRO${RESET}"
            log_message "ERROR" "Unsupported distribution during update: $DISTRO"
            exit 1
            ;;
    esac
}

show_help() {
    echo -e "${CYAN}Usage: carch [OPTIONS]${RESET}"
    echo
    echo -e "${CYAN}Options:${RESET}"
    echo -e "${YELLOW}  --help, -h              ${RESET}Show this help message and exit."
    echo -e "${YELLOW}  --version, -v           ${RESET}Show the program version."
    echo -e "${YELLOW}  --gen-config            ${RESET}Generate a default configuration file in ~/.config/carch/carch.conf."
    echo -e "${YELLOW}  --config <conf dir>     ${RESET}Use a specific configuration file to load selected scripts."
    echo -e "${YELLOW}  -c                      ${RESET}Use the default configuration file to load selected scripts."
    echo -e "${YELLOW}  --run-script <name>, -r ${RESET}Run the specified script from $SCRIPT_DIR."
    echo -e "${YELLOW}  --list-scripts, -l      ${RESET}List all available scripts in $SCRIPT_DIR."
    echo -e "${YELLOW}  --search, -s            ${RESET}Search for scripts by keyword."
    echo -e "${YELLOW}  --no-preview            ${RESET}Run without displaying script previews in menus (one-time)."
    echo -e "${YELLOW}  --disable-preview       ${RESET}Permanently disable script previews in menus."
    echo -e "${YELLOW}  --log                   ${RESET}Enable logging for the current session only."
    echo -e "${YELLOW}  --enable-logging        ${RESET}Permanently enable logging in the configuration file."
    echo -e "${YELLOW}  --update                ${RESET}Update Carch using the latest script."
    echo -e "${YELLOW}  --check-update          ${RESET}Check if a new version of Carch is available."
    echo -e "${YELLOW}  --uninstall             ${RESET}Uninstall Carch and remove all associated files."
    echo
}

list_scripts() {
    echo "Available scripts:"
    
    local categories=()
    while IFS= read -r -d '' dir; do
        categories+=("$(basename "$dir")")
    done < <(find "$SCRIPT_DIR" -mindepth 1 -maxdepth 1 -type d -print0)
    
    for category in "${categories[@]}"; do
        echo -e "${CYAN}$category:${RESET}"
        
        local script_files=()
        while IFS= read -r -d '' script; do
            script_files+=("$(basename "$script" .sh)")
        done < <(find "$SCRIPT_DIR/$category" -name "*.sh" -print0)
        
        if [ ${#script_files[@]} -eq 0 ]; then
            echo "  No scripts found in $category"
        else
            printf "  - %s\n" "${script_files[@]}"
        fi
    done
}

exit_with_log_message() {
    log_message "INFO" "Exiting Carch. Logs saved to: ${LOG_FILE}"
    exit 0
}

setup_logging

if [[ $# -gt 0 ]]; then
    case "$1" in
        --help|-h)
            show_help
            ;;
        --version|-v)
            INSTALLED_VERSION=$(get_installed_version)
            if [ "$INSTALLED_VERSION" = "not_installed" ]; then
                echo "Carch is not installed on this system."
                exit 1
            elif [ "$INSTALLED_VERSION" = "unknown" ]; then
                echo "Error: Unable to determine Carch version."
                exit 1
            else
                echo "Carch version $INSTALLED_VERSION"
            fi
            ;;
        --gen-config)
            generate_config
            ;;
        --config)
            if [[ -n $2 ]]; then
                CONFIG_FILE="$2"
                display_scripts_menu "config"
            else
                echo "Error: --config requires a file path."
                exit 1
            fi
            ;;
        -c)
            display_scripts_menu "config"
            ;;
        --run-script|-r)
            if [[ -n $2 ]]; then
                run_script_direct "$2"
            else
                echo "Error: --run-script requires a script name."
                exit 1
            fi
            ;;
        --list-scripts|-l)
            list_scripts
            ;;
        --search|-s)
            check_dependencies "fzf" "bash" "curl" "sed" "grep" || exit 1
            search_scripts "direct"
            ;;
        --no-preview)
            NO_PREVIEW="true"
            shift
            if [[ $# -gt 0 ]]; then
                "$0" "$@"
            else
                display_scripts_menu
            fi
            ;;
        --disable-preview)
            disable_preview
            ;;
        --log)
            LOG_MODE="true"
            shift
            if [[ $# -gt 0 ]]; then
                "$0" "$@"
            else
                display_scripts_menu
            fi
            ;;
        --enable-logging)
            enable_logging
            ;;
        --check-update)
            check_carch_update
            ;;
        --update)
            update 
            ;;
        --uninstall)
            uninstall_carch
            ;;
        *)
            echo -e "${YELLOW}Error: Unknown option '$1'. Use --help for usage.${RESET}"
            exit 1
            ;;
    esac
else
    check_dependencies "fzf" "bash" "curl" "sed" "grep" || exit 1
    display_scripts_menu
fi
