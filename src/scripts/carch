#!/bin/bash

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
LAVENDER='\033[38;2;138;79;255m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'
NC='\033[0m'

SCRIPT_EMOJI="🚀"
SUCCESS_EMOJI="✅"
ERROR_EMOJI="❌"
CONFIG_EMOJI="⚙️"
UPDATE_EMOJI="🔄"
SYSTEM_EMOJI="💻"

VERSION="4.1.6"
SCRIPT_DIR="./scripts"
LOG_FILE="$HOME/.config/carch/carch.log"
TARGET_DIR="/usr/bin"
DESKTOP_FILE="/usr/share/applications/carch.desktop"
MAN_PAGES_DIR="/usr/share/man/man1/carch.1"
ICON_DIR="/usr/share/icons/hicolor"

CONFIG_DIR="$HOME/.config/carch"
CONFIG_FILE="$CONFIG_DIR/carch.conf"

BASH_COMPLETION_DIR=$(pkg-config --variable=completionsdir bash-completion 2>/dev/null || echo "/usr/share/bash-completion/completions")

setup_logging() {
    mkdir -p "$(dirname "$LOG_FILE")"
    if [[ ! -f "$LOG_FILE" ]]; then
        touch "$LOG_FILE"
    fi
    chmod 644 "$LOG_FILE"
}

log_message() {
    local log_type="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$log_type] $message" >>"$LOG_FILE"
}

detect_distro() {
    if [ -f "/etc/arch-release" ]; then
        DISTRO="arch"
        echo -e "${YELLOW}Arch Linux${RESET}"
    elif [ -f "/etc/fedora-release" ]; then
        DISTRO="fedora"
        echo -e "${YELLOW}Fedora${RESET}"
    else
        DISTRO="unknown"
        echo -e "${RED}Unsupported distribution. Continuing with limited functionality...${RESET}"
    fi
}

ARCH=$(uname -m)

uninstall_carch() {
    detect_distro
    if [[ "$DISTRO" == "fedora" ]]; then
        echo "Distro is Fedora"
        echo -e "${YELLOW}Checking if Carch is installed via RPM...${RESET}"
        
        if rpm -q carch &>/dev/null; then
            echo -e "${YELLOW}Carch is installed via RPM. Removing package...${RESET}"
            sudo dnf remove -y carch
            echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
            log_message "INFO" "Carch uninstalled successfully via DNF."
        else
            echo -e "${RED}Carch RPM package not found on the system.${RESET}"
            log_message "WARNING" "Carch not found during uninstall attempt."
        fi
    elif [[ "$DISTRO" == "arch" || "$DISTRO" == "archLinux" ]]; then
        echo "Distro is Arch"
        if command -v paru &>/dev/null || command -v yay &>/dev/null; then
            echo -e "${YELLOW}AUR helper found. Checking Carch package...${RESET}"
            if pacman -Qs carch &>/dev/null; then
                AUR_PACKAGE=$(pacman -Q carch | awk '{print $1}')
                case "$AUR_PACKAGE" in
                    carch-git)
                        echo "Uninstalling carch-git..."
                        yay -R carch-git --noconfirm || paru -R carch-git --noconfirm
                        ;;
                    carch-bin)
                        echo "Uninstalling carch-bin..."
                        yay -R carch-bin --noconfirm || paru -R carch-bin --noconfirm
                        ;;
                    carch)
                        echo "Uninstalling carch..."
                        yay -R carch --noconfirm || paru -R carch --noconfirm
                        ;;
                    *)
                        echo "Unknown Carch package installed: $AUR_PACKAGE"
                        ;;
                esac
                echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
                log_message "INFO" "Carch uninstalled successfully from Arch Linux."
            else
                echo "Carch package not found in the system."
                log_message "WARNING" "Carch not found during uninstall attempt on Arch Linux."
            fi
        else
            echo -e "${RED}No AUR helper found. To uninstall Carch, please install an AUR helper like paru or yay.${RESET}"
            log_message "ERROR" "No AUR helper found for uninstalling Carch on Arch Linux."
        fi
    else
        echo -e "${RED}Unsupported Distribution: $DISTRO${RESET}"
        log_message "ERROR" "Unsupported distribution during uninstall: $DISTRO"
        exit 1
    fi
}

generate_config() {
    mkdir -p "$CONFIG_DIR"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOL
# Carch Configuration File
# List the script names (without .sh extension) you want to include in the menu.
# Example:
# Alacritty
# Kitty

EOL
        echo -e "${GREEN}Default configuration file created at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Generated default configuration file."
    else
        echo -e "${YELLOW}Configuration file already exists at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Configuration file already exists."
    fi
}

check_carch_update() {
    local REPO="harilvfs/carch"
    local LATEST_VERSION INSTALLED_VERSION

    LATEST_VERSION=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep -oP '"tag_name":\s*"\K[^"]+' | sed 's/^v//')
    INSTALLED_VERSION=$(carch --version | grep -oP '\d+\.\d+\.\d+')

    if [ -z "$LATEST_VERSION" ] || [ -z "$INSTALLED_VERSION" ]; then
        echo "Error: Unable to fetch version information."
        return 1
    fi

    if [ "$(printf '%s\n' "$INSTALLED_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$LATEST_VERSION" ]; then
        echo "Update available: Carch $INSTALLED_VERSION → $LATEST_VERSION"
        echo "Run \`carch --update\` to update."
    else
        echo "Carch is up to date."
    fi
}

load_selected_scripts() {
    scripts=()
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS= read -r script_name; do
            [[ "$script_name" =~ ^#.*$ || -z "$script_name" ]] && continue
            scripts+=("$script_name")
        done < "$CONFIG_FILE"
    else
        echo -e "${YELLOW}Configuration file not found. Loading all scripts.${RESET}"
        log_message "WARNING" "Configuration file not found. Loading all scripts."
        load_all_scripts
    fi
    scripts+=("Cancel")
}

load_all_scripts() {
    scripts=()
    while IFS= read -r -d '' file; do
        script_name=$(basename "${file}" .sh)
        scripts+=("$script_name")
    done < <(find "$SCRIPT_DIR" -maxdepth 1 -name '*.sh' -print0)
    scripts+=("Cancel")
}

prompt() {
    echo -e "${YELLOW}Press Enter to return to the menu...${RESET}"
    read -r
}


search_scripts() {
    local direct_mode="$1"
    
    echo -e "\n${CYAN}Search Scripts:${RESET}"
    echo -e "${YELLOW}Type to search available scripts...${RESET}"
    
    available_scripts=()
    while IFS= read -r -d '' file; do
        script_name=$(basename "${file}" .sh)
        available_scripts+=("$script_name")
    done < <(find "$SCRIPT_DIR" -maxdepth 1 -name '*.sh' -print0)
    
    selected_script=$(printf "%s\n" "${available_scripts[@]}" | gum filter --placeholder "Search for scripts...")
    
    if [[ -n "$selected_script" ]]; then
        local script_path="$SCRIPT_DIR/${selected_script}.sh"

        if [[ -f "$script_path" ]]; then
            log_message "INFO" "Starting script: ${selected_script}"
            echo -e "${YELLOW}Running script: ${selected_script}${RESET}"
            
            if bash "$script_path"; then
                echo -e "${GREEN}Script '${selected_script}' completed successfully.${RESET}"
                log_message "SUCCESS" "Script '${selected_script}' completed successfully."
            else
                echo -e "${YELLOW}Script '${selected_script}' encountered an error.${RESET}"
                log_message "ERROR" "Script '${selected_script}' encountered an error."
            fi
            
            if [[ "$direct_mode" == "direct" ]]; then
                sleep 0.5
                clear
                echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
                exit 0
            else
                echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
                log_message "INFO" "Logs saved after running script: ${selected_script}"
                prompt
            fi
        else
            echo -e "${YELLOW}Error: Script '${selected_script}' not found in $SCRIPT_DIR!${RESET}"
            log_message "ERROR" "Script '${selected_script}' not found in $SCRIPT_DIR."
            
            if [[ "$direct_mode" == "direct" ]]; then
                sleep 3
                echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
                exit 0
            else
                echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
                prompt
            fi
        fi
    else
        echo -e "${YELLOW}No script selected.${RESET}"
        if [[ "$direct_mode" != "direct" ]]; then
            prompt
        else
            exit 0
        fi
    fi
}

display_scripts_menu() {
    if [[ "$1" == "config" ]]; then
        load_selected_scripts
    else
        load_all_scripts
    fi
    while true; do
        clear
        echo -e "${MAGENTA}"
        figlet -f slant "Carch"
        echo -e "${GREEN}v$VERSION - Automate Your Linux Setup${RESET}"
        echo -e "${YELLOW}---------------------${RESET}"
        echo -e "${GREEN}Distro:${RESET} $(detect_distro)"
        echo -e "${GREEN}Architecture:${RESET} ${YELLOW}$ARCH${RESET}"
        echo -e "${YELLOW}---------------------${RESET}"
        echo -e "${GREEN}For more info: \033[4;34mhttps://carch-org.github.io/docs/${RESET}"
        search_option="[🔍 Search scripts (press 's' to search)]"
        echo -e "\n${LAVENDER}$search_option${RESET}"
        echo -e "\n${SYSTEM_EMOJI} ${CYAN}System Health:${RESET}"
        df -h | awk -v CYAN='\033[0;36m' -v RESET='\033[0m' '$NF=="/" {printf "%sDisk:%s %.1f%% Used | ", CYAN, RESET, $5+0}'
        free -h | awk -v CYAN='\033[0;36m' -v RESET='\033[0m' '/Mem:/ {printf "%sMemory:%s %.1f%% Used\n", CYAN, RESET, $3/$2 * 100.0}'
        echo "    "
        
        echo -e "${YELLOW}Press 's' to search, 'e' to exit, or any other key to show menu...${RESET}"
        old_settings=$(stty -g)
        stty raw -echo
        key=$(dd bs=1 count=1 2>/dev/null)
        stty "$old_settings"
        
        if [[ "$key" == "s" ]]; then
            search_scripts
            continue
        elif [[ "$key" == "e" ]]; then
            clear
            log_message "INFO" "User exited the main menu."
            exit_with_log_message
        fi
        
        echo -e "${LAVENDER}Select a script to run:${RESET}"
        
        all_options=("Search" "${scripts[@]}")
        selected_option=$(gum choose "${all_options[@]}")
        if [[ "$selected_option" == "Search" ]]; then
            search_scripts
        elif [[ "$selected_option" == "Cancel" ]]; then
            clear
            log_message "INFO" "User exited the main menu."
            exit_with_log_message
        else
            run_script "$selected_option"
        fi
    done
}

run_script() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/${script_name}.sh"

    if [[ -f "$script_path" ]]; then
        log_message "INFO" "Starting script: ${script_name}"
        echo -e "${YELLOW}Running script: ${script_name}${RESET}"
        if bash "$script_path"; then
            echo -e "${GREEN}Script '${script_name}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_name}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_name}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_name}' encountered an error."
        fi
    else
        echo -e "${YELLOW}Error: Script '${script_name}' not found in $SCRIPT_DIR!${RESET}"
        log_message "ERROR" "Script '${script_name}' not found in $SCRIPT_DIR."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_name}"

    prompt
}

run_script_direct() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/${script_name}.sh"

    if [[ -f "$script_path" ]]; then
        log_message "INFO" "Starting script: ${script_name}"
        echo -e "${YELLOW}Running script: ${script_name}${RESET}"
        if bash "$script_path"; then
            echo -e "${GREEN}Script '${script_name}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_name}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_name}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_name}' encountered an error."
        fi
    else
        echo -e "${YELLOW}Error: Script '${script_name}' not found in $SCRIPT_DIR!${RESET}"
        log_message "ERROR" "Script '${script_name}' not found in $SCRIPT_DIR."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_name}"
}

update() {
   detect_distro 
    
    if [[ "$DISTRO" == "fedora" ]]; then
        echo "Distro is Fedora. Running the Fedora update script..."
        bash <(curl -L https://chalisehari.com.np/fedora)
        
    elif [[ "$DISTRO" == "arch" || "$DISTRO" == "archLinux" ]]; then
        echo "Distro is Arch. Running the Arch update script..."
        bash <(curl -L https://chalisehari.com.np/arch)
        
    else
        echo "Unsupported Distro. Only Fedora and Arch are supported."
        exit 1
    fi
}

show_help() {
    echo "Usage: carch [OPTIONS]"
    echo
    echo "A script for automating Linux setups."
    echo
    echo "Options:"
    echo "  --help, -h              Show this help message and exit."
    echo "  --version, -v           Show the program version."
    echo "  --gen-config            Generate a default configuration file in ~/.config/carch/carch.conf."
    echo "  --config <conf dir>     Use a specific configuration file to load selected scripts."
    echo "  -c                      Use the default configuration file to load selected scripts."
    echo "  --run-script <name>, -r Run the specified script from $SCRIPT_DIR."
    echo "  --list-scripts, -l      List all available scripts in $SCRIPT_DIR."
    echo "  --search, -s            Search for scripts by keyword."
    echo "  --update                Update Carch using the latest script."
    echo "  --check-update          Check if a new version of Carch is available."
    echo "  --uninstall             Uninstall Carch and remove all associated files."
    echo
}

list_scripts() {
    echo "Available scripts in $SCRIPT_DIR:"
    for script in "$SCRIPT_DIR"/*.sh; do
        echo "  - $(basename "$script" .sh)"
    done
}

exit_with_log_message() {
    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Exiting Carch. Logs saved to: ${LOG_FILE}"
    exit 0
}

setup_logging

if [[ $# -gt 0 ]]; then
    case "$1" in
        --help|-h)
            show_help
            ;;
        --version|-v)
            echo "Carch version 4.1.6"
            ;;
        --gen-config)
            generate_config
            ;;
        --config)
            if [[ -n $2 ]]; then
                CONFIG_FILE="$2"
                display_scripts_menu "config"
            else
                echo "Error: --config requires a file path."
                exit 1
            fi
            ;;
        -c)
            display_scripts_menu "config"
            ;;
        --run-script|-r)
            if [[ -n $2 ]]; then
                run_script_direct "$2"
            else
                echo "Error: --run-script requires a script name."
                exit 1
            fi
            ;;
        --list-scripts|-l)
            list_scripts
            ;;
        --search|-s)
            search_scripts "direct"
            ;;
        --check-update)
            check_carch_update
            ;;
        --update)
            update 
            ;;
        --uninstall)
            uninstall_carch
            ;;
        *)
            echo -e "${YELLOW}Error: Unknown option '$1'. Use --help for usage.${RESET}"
            exit 1
            ;;
    esac
else
    display_scripts_menu
fi
