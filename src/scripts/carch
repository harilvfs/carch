#!/bin/bash

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
LAVENDER='\033[38;2;138;79;255m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'
NC='\033[0m'

SCRIPT_EMOJI="🚀"
SUCCESS_EMOJI="✅"
ERROR_EMOJI="❌"
CONFIG_EMOJI="⚙️"
UPDATE_EMOJI="🔄"
SYSTEM_EMOJI="💻"

SCRIPT_DIR="./scripts"
LOG_FILE="$HOME/.config/carch/carch.log"

CONFIG_DIR="$HOME/.config/carch"
CONFIG_FILE="$CONFIG_DIR/carch.conf"

setup_logging() {
    mkdir -p "$(dirname "$LOG_FILE")"
    if [[ ! -f "$LOG_FILE" ]]; then
        touch "$LOG_FILE"
    fi
    chmod 644 "$LOG_FILE"
}

log_message() {
    local log_type="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$log_type] $message" >>"$LOG_FILE"
}

detect_distro() {
    if [ -f "/etc/arch-release" ]; then
        DISTRO="arch"
        echo -e "${YELLOW}Arch Linux${RESET}"
    elif [ -f "/etc/fedora-release" ]; then
        DISTRO="fedora"
        echo -e "${YELLOW}Fedora${RESET}"
    else
        DISTRO="unknown"
        echo -e "${RED}Unsupported distribution. Continuing with limited functionality...${RESET}"
    fi
}

ARCH=$(uname -m)

uninstall_carch() {
    detect_distro
    if [[ "$DISTRO" == "fedora" ]]; then
        echo "Distro is Fedora"
        echo -e "${YELLOW}Checking if Carch is installed via RPM...${RESET}"
        
        if rpm -q carch &>/dev/null; then
            echo -e "${YELLOW}Carch is installed via RPM. Removing package...${RESET}"
            sudo dnf remove -y carch
            echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
            log_message "INFO" "Carch uninstalled successfully via DNF."
        else
            echo -e "${RED}Carch RPM package not found on the system.${RESET}"
            log_message "WARNING" "Carch not found during uninstall attempt."
        fi
    elif [[ "$DISTRO" == "arch" || "$DISTRO" == "archLinux" ]]; then
        echo "Distro is Arch"
        if command -v paru &>/dev/null || command -v yay &>/dev/null; then
            echo -e "${YELLOW}AUR helper found. Checking Carch package...${RESET}"
            if pacman -Qs carch &>/dev/null; then
                AUR_PACKAGE=$(pacman -Q carch | awk '{print $1}')
                case "$AUR_PACKAGE" in
                    carch-git)
                        echo "Uninstalling carch-git..."
                        yay -R carch-git --noconfirm || paru -R carch-git --noconfirm
                        ;;
                    carch)
                        echo "Uninstalling carch..."
                        yay -R carch --noconfirm || paru -R carch --noconfirm
                        ;;
                    *)
                        echo "Unknown Carch package installed: $AUR_PACKAGE"
                        ;;
                esac
                echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
                log_message "INFO" "Carch uninstalled successfully from Arch Linux."
            else
                echo "Carch package not found in the system."
                log_message "WARNING" "Carch not found during uninstall attempt on Arch Linux."
            fi
        else
            echo -e "${RED}No AUR helper found. To uninstall Carch, please install an AUR helper like paru or yay.${RESET}"
            log_message "ERROR" "No AUR helper found for uninstalling Carch on Arch Linux."
        fi
    else
        echo -e "${RED}Unsupported Distribution: $DISTRO${RESET}"
        log_message "ERROR" "Unsupported distribution during uninstall: $DISTRO"
        exit 1
    fi
}

generate_config() {
    mkdir -p "$CONFIG_DIR"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOL
# Carch Configuration File
# List the script names (without .sh extension) you want to include in the menu.
# Example:
# Alacritty
# Kitty

EOL
        echo -e "${GREEN}Default configuration file created at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Generated default configuration file."
    else
        echo -e "${YELLOW}Configuration file already exists at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Configuration file already exists."
    fi
}

get_installed_version() {
    if command -v carch >/dev/null 2>&1; then
        if command -v pacman >/dev/null 2>&1; then
            pacman_version=$(pacman -Q carch 2>/dev/null | awk '{print $2}')
            if [[ -n "$pacman_version" ]]; then
                echo "$pacman_version"
                return
            fi
        elif command -v rpm >/dev/null 2>&1; then
            rpm_version=$(rpm -q --qf '%{VERSION}' carch 2>/dev/null)
            if [[ $? -eq 0 && -n "$rpm_version" ]]; then
                echo "$rpm_version"
                return
            fi
        fi
        
        carch_path=$(which carch)
        strings "$carch_path" 2>/dev/null | grep -E 'v?[0-9]+\.[0-9]+\.[0-9]+' | head -n1 || echo "unknown"
    else
        echo "not_installed"
    fi
}

load_selected_scripts() {
    scripts=()
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS= read -r script_name; do
            [[ "$script_name" =~ ^#.*$ || -z "$script_name" ]] && continue
            scripts+=("$script_name")
        done < "$CONFIG_FILE"
    else
        echo -e "${YELLOW}Configuration file not found. Loading all scripts.${RESET}"
        log_message "WARNING" "Configuration file not found. Loading all scripts."
        load_all_scripts
    fi
    scripts+=("Cancel")
}

load_all_scripts() {
    scripts=()
    while IFS= read -r -d '' file; do
        script_name=$(basename "${file}" .sh)
        scripts+=("$script_name")
    done < <(find "$SCRIPT_DIR" -maxdepth 1 -name '*.sh' -print0)
    scripts+=("Cancel")
}

prompt() {
    echo -e "${YELLOW}Press Enter to return to the menu...${RESET}"
    read -r
}

check_fzf() {
    if ! command -v fzf &> /dev/null; then
        echo -e "${RED}Error: fzf is not installed. Please install fzf to use this script.${RESET}"
        log_message "ERROR" "fzf not installed. Required for script functionality."
        echo -e "${YELLOW}Arch Linux: sudo pacman -S fzf${RESET}"
        echo -e "${YELLOW}Fedora: sudo dnf install fzf${RESET}"
        exit 1
    fi
}

search_scripts() {
  clear
    local direct_mode="$1"
    
    while true; do
        echo -e "\n${CYAN}Search Scripts: Press Esc To Exit${RESET}"
        echo -e "${YELLOW}Type to search available scripts...${RESET}"
        
        available_scripts=()
        while IFS= read -r -d '' file; do
            script_name=$(basename "${file}" .sh)
            available_scripts+=("$script_name")
        done < <(find "$SCRIPT_DIR" -maxdepth 1 -name '*.sh' -print0)
        
        selected_script=$(printf "%s\n" "${available_scripts[@]}" | fzf --height 40% --border --prompt="Search scripts: " --preview="cat $SCRIPT_DIR/{}.sh" --preview-window=right:50%)
        
        if [[ -n "$selected_script" ]]; then
            local script_path="$SCRIPT_DIR/${selected_script}.sh"
            if [[ -f "$script_path" ]]; then
                log_message "INFO" "Starting script: ${selected_script}"
                echo -e "${YELLOW}Running script: ${selected_script}${RESET}"
                
                ( bash "$script_path" )
                script_exit_code=$?
                
                if [[ $script_exit_code -eq 0 ]]; then
                    echo -e "${GREEN}Script '${selected_script}' completed successfully.${RESET}"
                    log_message "SUCCESS" "Script '${selected_script}' completed successfully."
                else
                    echo -e "${YELLOW}Script '${selected_script}' encountered an error.${RESET}"
                    log_message "ERROR" "Script '${selected_script}' encountered an error."
                fi
                
                echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
                log_message "INFO" "Logs saved after running script: ${selected_script}"
                
                if [[ "$direct_mode" == "direct" ]]; then
                    read -rp "Press Enter to continue or type 'q' to quit: " user_choice
                    if [[ "$user_choice" == "q" ]]; then
                        clear
                        echo -e "${YELLOW}Exiting... Logs have been saved to: ${LOG_FILE}${RESET}"
                        exit 0
                    else
                        clear
                        continue
                    fi
                else
                    read -p "Press Enter to return to script search... " 
                    clear
                    continue
                fi
            else
                echo -e "${YELLOW}Error: Script '${selected_script}' not found in $SCRIPT_DIR!${RESET}"
                log_message "ERROR" "Script '${selected_script}' not found in $SCRIPT_DIR."
                sleep 2
                clear
                continue
            fi
        else
            if [[ "$direct_mode" != "direct" ]]; then
                prompt
                break
            else
                read -rp "Press Enter to return to script search or type 'q' to quit: " user_choice
                if [[ "$user_choice" == "q" ]]; then
                    clear
                    echo -e "${YELLOW}Exiting... Logs have been saved to: ${LOG_FILE}${RESET}"
                    exit 0
                else
                    clear
                    continue
                fi
            fi
        fi
    done
}

get_latest_version() {
    local REPO="harilvfs/carch"
    local LATEST_VERSION
    
    LATEST_VERSION=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | 
                    grep -oP '"tag_name":\s*"\K[^"]+' | 
                    sed 's/^v//')
    
    if [ -z "$LATEST_VERSION" ]; then
        echo "unknown"
    else
        echo "$LATEST_VERSION"
    fi
}

check_carch_update() {
    local REPO="harilvfs/carch"
    local LATEST_VERSION INSTALLED_VERSION
    
    INSTALLED_VERSION=$(get_installed_version)
    LATEST_VERSION=$(get_latest_version)
    
    if [ "$INSTALLED_VERSION" = "not_installed" ]; then
        echo "Carch is not installed on this system."
        return 1
    fi
    
    if [ "$INSTALLED_VERSION" = "unknown" ] || [ "$LATEST_VERSION" = "unknown" ]; then
        echo "Error: Unable to fetch version information."
        return 1
    fi
    
    if [ "$(printf '%s\n' "$INSTALLED_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$LATEST_VERSION" ]; then
        echo "Update available: Carch $INSTALLED_VERSION → $LATEST_VERSION"
        echo "Run \`carch --update\` to update."
    else
        echo "Carch is up to date ($INSTALLED_VERSION)."
    fi
}

display_scripts_menu() {
    check_fzf
    if [[ "$1" == "config" ]]; then
        load_selected_scripts
    else
        load_all_scripts
    fi
    INSTALLED_VERSION=$(get_installed_version)
    TERM_WIDTH=$(tput cols)

    while true; do
        clear
        echo -e "${BLUE}╭$(printf '─%.0s' $(seq 1 $((TERM_WIDTH - 2))))╮${NC}"
        
        title="CARCH"
        title_spaces=$(( (TERM_WIDTH - 2 - ${#title}) / 2 ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $title_spaces))${title}$(printf ' %.0s' $(seq 1 $((TERM_WIDTH - 2 - title_spaces - ${#title}))))│${NC}"
        
        version_text="$INSTALLED_VERSION - Automate Your Linux Setup"
        version_spaces=$(( (TERM_WIDTH - 2 - ${#version_text}) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - version_spaces - ${#version_text} ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $version_spaces))${GREEN}${version_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        separator="---------------------"
        separator_spaces=$(( (TERM_WIDTH - 2 - ${#separator}) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - separator_spaces - ${#separator} ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $separator_spaces))${YELLOW}${separator}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        if [[ -f /etc/os-release ]]; then
            distro_info=$(grep -oP '^ID=\K.*' /etc/os-release | tr -d '"')
        else
            distro_info="Unknown"
        fi
        
        case "$distro_info" in
            arch)   fixed_width=18 ;;
            fedora) fixed_width=14 ;;
            *)      fixed_width=16 ;;
        esac
        
        distro_text=$(printf "%-${fixed_width}s" "Distro: $distro_info")
        distro_spaces=$(( (TERM_WIDTH - 2 - fixed_width) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - distro_spaces - fixed_width ))
        [[ $distro_spaces -lt 0 ]] && distro_spaces=0
        [[ $right_padding -lt 0 ]] && right_padding=0
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $distro_spaces))${GREEN}${distro_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        arch_text="Architecture: ${ARCH}"
        arch_spaces=$(( (TERM_WIDTH - 2 - ${#arch_text}) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - arch_spaces - ${#arch_text} ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $arch_spaces))${GREEN}${arch_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $separator_spaces))${YELLOW}${separator}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        info_text="For more info: https://carch-org.github.io/docs/"
        info_spaces=$(( (TERM_WIDTH - 2 - ${#info_text}) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - info_spaces - ${#info_text} ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $info_spaces))${GREEN}${info_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $((TERM_WIDTH - 2))))│${NC}"
        
        health_text="🖥 System Health:"
        emoji_width=2
        health_text_visible_length=$((${#health_text} + emoji_width - 2))
        health_spaces=$(( (TERM_WIDTH - 2 - health_text_visible_length) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - health_spaces - health_text_visible_length ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $health_spaces))${CYAN}${health_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        disk_percent=$(df -h | awk '$NF=="/" {printf "%.1f", $5+0}')
        disk_text="Disk: ${disk_percent}% Used"
        disk_spaces=$(( (TERM_WIDTH - 2 - ${#disk_text}) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - disk_spaces - ${#disk_text} ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $disk_spaces))${CYAN}${disk_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        mem_percent=$(free -h | awk '/Mem:/ {printf "%.1f", $3/$2 * 100.0}')
        mem_text="Memory: ${mem_percent}% Used"
        mem_spaces=$(( (TERM_WIDTH - 2 - ${#mem_text}) / 2 ))
        right_padding=$(( TERM_WIDTH - 2 - mem_spaces - ${#mem_text} ))
        echo -e "${BLUE}│$(printf ' %.0s' $(seq 1 $mem_spaces))${CYAN}${mem_text}${RESET}$(printf ' %.0s' $(seq 1 $right_padding))${BLUE}│${NC}"
        
        echo -e "${BLUE}╰$(printf '─%.0s' $(seq 1 $((TERM_WIDTH - 2))))╯${NC}"
        
        echo -e "${LAVENDER}Select a script to run:${RESET}"
        cancel_exists=0
        for script in "${scripts[@]}"; do
            if [[ "$script" == "Cancel" ]]; then
                cancel_exists=1
                break
            fi
        done
        
        if [[ $cancel_exists -eq 0 ]]; then
            all_options=("${scripts[@]}" "Cancel")
        else
            all_options=("${scripts[@]}")
        fi
        
        selected_option=$(printf "%s\n" "${all_options[@]}" | fzf --height 40% --border \
            --prompt="Select a script: " \
            --header="Navigate with arrow keys, Enter to select, Cancel to Exit" \
            --preview="cat $SCRIPT_DIR/{}.sh 2>/dev/null || echo 'No preview available'" --preview-window=right:50%)
        
        if [[ -z "$selected_option" ]]; then
            continue
        elif [[ "$selected_option" == "Cancel" ]]; then
            clear
            log_message "INFO" "User exited the main menu."
            exit_with_log_message
        else
            run_script "$selected_option"
        fi
    done
}

run_script() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/${script_name}.sh"

    if [[ -f "$script_path" ]]; then
        log_message "INFO" "Starting script: ${script_name}"
        echo -e "${YELLOW}Running script: ${script_name}${RESET}"
        if bash "$script_path"; then
            echo -e "${GREEN}Script '${script_name}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_name}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_name}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_name}' encountered an error."
        fi
    else
        echo -e "${YELLOW}Error: Script '${script_name}' not found in $SCRIPT_DIR!${RESET}"
        log_message "ERROR" "Script '${script_name}' not found in $SCRIPT_DIR."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_name}"

    prompt
}

run_script_direct() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/${script_name}.sh"

    if [[ -f "$script_path" ]]; then
        log_message "INFO" "Starting script: ${script_name}"
        echo -e "${YELLOW}Running script: ${script_name}${RESET}"
        if bash "$script_path"; then
            echo -e "${GREEN}Script '${script_name}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_name}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_name}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_name}' encountered an error."
        fi
    else
        echo -e "${YELLOW}Error: Script '${script_name}' not found in $SCRIPT_DIR!${RESET}"
        log_message "ERROR" "Script '${script_name}' not found in $SCRIPT_DIR."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_name}"
}

update() {
    detect_distro 
    
    if [[ "$DISTRO" == "fedora" ]]; then
        echo "Distro is Fedora. Running the Fedora update script..."
        bash <(curl -L https://chalisehari.com.np/fedora)
        
    elif [[ "$DISTRO" == "arch" || "$DISTRO" == "archLinux" ]]; then
        echo "Distro is Arch. Running the Arch update script..."
        bash <(curl -L https://chalisehari.com.np/arch)
        
    else
        echo "Unsupported Distro. Only Fedora and Arch are supported."
        exit 1
    fi
}

show_help() {
    echo "Usage: carch [OPTIONS]"
    echo
    echo "A script for automating Linux setups."
    echo
    echo "Options:"
    echo "  --help, -h              Show this help message and exit."
    echo "  --version, -v           Show the program version."
    echo "  --gen-config            Generate a default configuration file in ~/.config/carch/carch.conf."
    echo "  --config <conf dir>     Use a specific configuration file to load selected scripts."
    echo "  -c                      Use the default configuration file to load selected scripts."
    echo "  --run-script <name>, -r Run the specified script from $SCRIPT_DIR."
    echo "  --list-scripts, -l      List all available scripts in $SCRIPT_DIR."
    echo "  --search, -s            Search for scripts by keyword."
    echo "  --update                Update Carch using the latest script."
    echo "  --check-update          Check if a new version of Carch is available."
    echo "  --uninstall             Uninstall Carch and remove all associated files."
    echo
}

list_scripts() {
    echo "Available scripts in $SCRIPT_DIR:"
    local script_files=()
    while IFS= read -r -d '' script; do
        script_files+=("$(basename "$script" .sh)")
    done < <(find "$SCRIPT_DIR" -maxdepth 1 -name "*.sh" -print0)
    
    if [ ${#script_files[@]} -eq 0 ]; then
        echo "  No scripts found in $SCRIPT_DIR"
    else
        printf "  - %s\n" "${script_files[@]}"
    fi
}

exit_with_log_message() {
    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Exiting Carch. Logs saved to: ${LOG_FILE}"
    exit 0
}

setup_logging

if [[ $# -gt 0 ]]; then
    case "$1" in
        --help|-h)
            show_help
            ;;
        --version|-v)
            INSTALLED_VERSION=$(get_installed_version)
            if [ "$INSTALLED_VERSION" = "not_installed" ]; then
                echo "Carch is not installed on this system."
                exit 1
            elif [ "$INSTALLED_VERSION" = "unknown" ]; then
                echo "Error: Unable to determine Carch version."
                exit 1
            else
                echo "Carch version $INSTALLED_VERSION"
            fi
            ;;
        --gen-config)
            generate_config
            ;;
        --config)
            if [[ -n $2 ]]; then
                CONFIG_FILE="$2"
                display_scripts_menu "config"
            else
                echo "Error: --config requires a file path."
                exit 1
            fi
            ;;
        -c)
            display_scripts_menu "config"
            ;;
        --run-script|-r)
            if [[ -n $2 ]]; then
                run_script_direct "$2"
            else
                echo "Error: --run-script requires a script name."
                exit 1
            fi
            ;;
        --list-scripts|-l)
            list_scripts
            ;;
        --search|-s)
            check_fzf
            search_scripts "direct"
            ;;
        --check-update)
            check_carch_update
            ;;
        --update)
            update 
            ;;
        --uninstall)
            uninstall_carch
            ;;
        *)
            echo -e "${YELLOW}Error: Unknown option '$1'. Use --help for usage.${RESET}"
            exit 1
            ;;
    esac
else
    check_fzf
    display_scripts_menu
fi
