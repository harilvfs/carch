#!/bin/bash

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m'
NC='\033[0m'

VERSION="4.1.5"
SCRIPT_DIR="./scripts"
LOG_FILE="$HOME/.config/carch/carch.log"
TARGET_DIR="/usr/bin"
DESKTOP_FILE="/usr/share/applications/carch.desktop"
MAN_PAGES_DIR="/usr/share/man/man1/carch.1"
ICON_DIR="/usr/share/icons/hicolor"

CONFIG_DIR="$HOME/.config/carch"
CONFIG_FILE="$CONFIG_DIR/carch.conf"

BASH_COMPLETION_DIR=$(pkg-config --variable=completionsdir bash-completion 2>/dev/null || echo "/usr/share/bash-completion/completions")

setup_logging() {
    mkdir -p "$(dirname "$LOG_FILE")"
    if [[ ! -f "$LOG_FILE" ]]; then
        touch "$LOG_FILE"
    fi
    chmod 644 "$LOG_FILE"
}

log_message() {
    local log_type="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$log_type] $message" >>"$LOG_FILE"
}

detect_distro() {
    if [ -f "/etc/arch-release" ]; then
        DISTRO="arch"
        echo -e "${YELLOW}Arch Linux${RESET}"
    elif [ -f "/etc/fedora-release" ]; then
        DISTRO="fedora"
        echo -e "${YELLOW}Fedora${RESET}"
    else
        DISTRO="unknown"
        echo -e "${RED}Unsupported distribution. Continuing with limited functionality...${RESET}"
    fi
}

ARCH=$(uname -m)

uninstall_carch() {
    detect_distro
    if [[ "$DISTRO" == "fedora" ]]; then
        echo "Distro is Fedora"

        echo -e "${YELLOW}Removing Carch from the system...${RESET}"
        
        sudo rm -f "$TARGET_DIR/carch"
        sudo rm -f "$DESKTOP_FILE"
        sudo rm -f "$MAN_PAGES_DIR"
        sudo find "$ICON_DIR" -type f -name "carch.png" -exec rm -f {} \;

        for dir in $(zsh -c 'echo $fpath'); do
            if [[ -f "$dir/_carch" ]]; then
                sudo rm -f "$dir/_carch"
                [[ -z $(ls -A "$dir" 2>/dev/null) ]] && sudo rmdir "$dir"
            fi
        done

        if [[ -d "$BASH_COMPLETION_DIR" ]]; then
            echo "Checking Bash completion directory: $BASH_COMPLETION_DIR"
            if [[ -f "$BASH_COMPLETION_DIR/carch" ]]; then
                sudo rm -f "$BASH_COMPLETION_DIR/carch"
                echo "Removed Bash completion: $BASH_COMPLETION_DIR/carch"
            fi
            [[ -z $(ls -A "$BASH_COMPLETION_DIR" 2>/dev/null) ]] && sudo rmdir "$BASH_COMPLETION_DIR" && echo "Removed empty Bash completion directory: $BASH_COMPLETION_DIR"
        fi

        GLOBAL_FISH_COMPLETION_DIR="/usr/share/fish/completions"
        if [[ -d "$GLOBAL_FISH_COMPLETION_DIR" ]]; then
            echo "Checking global Fish completion directory: $GLOBAL_FISH_COMPLETION_DIR"
            if [[ -f "$GLOBAL_FISH_COMPLETION_DIR/carch.fish" ]]; then
                sudo rm -f "$GLOBAL_FISH_COMPLETION_DIR/carch.fish"
                echo "Removed global Fish completion: $GLOBAL_FISH_COMPLETION_DIR/carch.fish"
            fi
            [[ -z $(ls -A "$GLOBAL_FISH_COMPLETION_DIR" 2>/dev/null) ]] && sudo rmdir "$GLOBAL_FISH_COMPLETION_DIR" && echo "Removed empty global Fish completion directory: $GLOBAL_FISH_COMPLETION_DIR"
        fi

        LOCAL_FISH_COMPLETION_DIR="$HOME/.config/fish/completions"
        if [[ -d "$LOCAL_FISH_COMPLETION_DIR" ]]; then
            echo "Checking local Fish completion directory: $LOCAL_FISH_COMPLETION_DIR"
            if [[ -f "$LOCAL_FISH_COMPLETION_DIR/carch.fish" ]]; then
                rm -f "$LOCAL_FISH_COMPLETION_DIR/carch.fish"
                echo "Removed local Fish completion: $LOCAL_FISH_COMPLETION_DIR/carch.fish"
            fi
            [[ -z $(ls -A "$LOCAL_FISH_COMPLETION_DIR" 2>/dev/null) ]] && rmdir "$LOCAL_FISH_COMPLETION_DIR" && echo "Removed empty local Fish completion directory: $LOCAL_FISH_COMPLETION_DIR"
        fi

        echo -e "${GREEN}Carch has been successfully uninstalled.${RESET}"
        log_message "INFO" "Carch uninstalled successfully."

elif [[ "$DISTRO" == "arch" || "$DISTRO" == "archLinux" ]]; then
    echo "Distro is Arch"

    if command -v paru &>/dev/null || command -v yay &>/dev/null; then
        echo -e "${YELLOW}AUR helper found. Checking Carch package...${RESET}"

        if pacman -Qs carch &>/dev/null; then
            AUR_PACKAGE=$(pacman -Q carch | awk '{print $1}')

            case "$AUR_PACKAGE" in
                carch-git)
                    echo "Uninstalling carch-git..."
                    yay -R carch-git --noconfirm || paru -R carch-git --noconfirm
                    ;;
                carch-bin)
                    echo "Uninstalling carch-bin..."
                    yay -R carch-bin --noconfirm || paru -R carch-bin --noconfirm
                    ;;
                carch)
                    echo "Uninstalling carch..."
                    yay -R carch --noconfirm || paru -R carch --noconfirm
                    ;;
                *)
                    echo "Unknown Carch package installed: $AUR_PACKAGE"
                    ;;
            esac
        else
            echo "Carch package not found in the system."
        fi
    else
        echo "No AUR helper found. To uninstall Carch, please install an AUR helper like paru or yay."
    fi
else
    echo "Unsupported Distro"
    exit 1
fi
}

generate_config() {
    mkdir -p "$CONFIG_DIR"
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" <<EOL
# Carch Configuration File
# List the script names (without .sh extension) you want to include in the menu.
# Example:
# Alacritty
# Kitty

EOL
        echo -e "${GREEN}Default configuration file created at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Generated default configuration file."
    else
        echo -e "${YELLOW}Configuration file already exists at $CONFIG_FILE.${RESET}"
        log_message "INFO" "Configuration file already exists."
    fi
}

load_selected_scripts() {
    scripts=()
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS= read -r script_name; do
            [[ "$script_name" =~ ^#.*$ || -z "$script_name" ]] && continue
            scripts+=("$script_name")
        done < "$CONFIG_FILE"
    else
        echo -e "${YELLOW}Configuration file not found. Loading all scripts.${RESET}"
        log_message "WARNING" "Configuration file not found. Loading all scripts."
        load_all_scripts
    fi
    scripts+=("Cancel")
}

load_all_scripts() {
    scripts=()
    while IFS= read -r -d '' file; do
        script_name=$(basename "${file}" .sh)
        scripts+=("$script_name")
    done < <(find "$SCRIPT_DIR" -maxdepth 1 -name '*.sh' -print0)
    scripts+=("Cancel")
}

prompt() {
    echo -e "${YELLOW}Press Enter to return to the menu...${RESET}"
    read -r
}

display_scripts_menu() {
    if [[ "$1" == "config" ]]; then
        load_selected_scripts
    else
        load_all_scripts
    fi

    while true; do
        clear
        echo -e "${GREEN}"
        figlet -f slant "Carch"
        echo "v$VERSION"
        echo "Distro: $(detect_distro)"
        echo -e "${GREEN}Architecture:${RESET} ${YELLOW}$ARCH${RESET}"
        echo -e "${YELLOW}---------------------${RESET}"
        echo -e "${GREEN}Automate Your Linux Setup."
        echo -e "${GREEN}For more information, visit: \033[4;34mhttps://carch-org.github.io/docs/\033[0m"
        echo -e "${NC}"

        echo "Select a script to run:"
        selected_script=$(gum choose "${scripts[@]}")

        if [[ "$selected_script" == "Cancel" ]]; then
            clear
            log_message "INFO" "User exited the main menu."
            exit_with_log_message
        else
            run_script "$selected_script"
        fi
    done
}

run_script() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/${script_name}.sh"

    if [[ -f "$script_path" ]]; then
        log_message "INFO" "Starting script: ${script_name}"
        echo -e "${YELLOW}Running script: ${script_name}${RESET}"
        if bash "$script_path"; then
            echo -e "${GREEN}Script '${script_name}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_name}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_name}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_name}' encountered an error."
        fi
    else
        echo -e "${YELLOW}Error: Script '${script_name}' not found in $SCRIPT_DIR!${RESET}"
        log_message "ERROR" "Script '${script_name}' not found in $SCRIPT_DIR."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_name}"

    prompt
}

run_script_direct() {
    local script_name="$1"
    local script_path="$SCRIPT_DIR/${script_name}.sh"

    if [[ -f "$script_path" ]]; then
        log_message "INFO" "Starting script: ${script_name}"
        echo -e "${YELLOW}Running script: ${script_name}${RESET}"
        if bash "$script_path"; then
            echo -e "${GREEN}Script '${script_name}' completed successfully.${RESET}"
            log_message "SUCCESS" "Script '${script_name}' completed successfully."
        else
            echo -e "${YELLOW}Script '${script_name}' encountered an error.${RESET}"
            log_message "ERROR" "Script '${script_name}' encountered an error."
        fi
    else
        echo -e "${YELLOW}Error: Script '${script_name}' not found in $SCRIPT_DIR!${RESET}"
        log_message "ERROR" "Script '${script_name}' not found in $SCRIPT_DIR."
    fi

    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Logs saved after running script: ${script_name}"
}

update() {
   detect_distro 
    
    if [[ "$DISTRO" == "fedora" ]]; then
        echo "Distro is Fedora. Running the Fedora update script..."
        bash <(curl -L https://chalisehari.com.np/fedora)
        
    elif [[ "$DISTRO" == "arch" || "$DISTRO" == "archLinux" ]]; then
        echo "Distro is Arch. Running the Arch update script..."
        bash <(curl -L https://chalisehari.com.np/arch)
        
    else
        echo "Unsupported Distro. Only Fedora and Arch are supported."
        exit 1
    fi
}

show_help() {
    echo "Usage: carch [OPTIONS]"
    echo
    echo "A tool for automating Arch Linux setups."
    echo
    echo "Options:"
    echo "  --help, -h              Show this help message and exit."
    echo "  --version, -v           Show the program version."
    echo "  --gen-config            Generate a default configuration file in ~/.config/carch/carch.conf."
    echo "  --config <conf dir>     Use a specific configuration file to load selected scripts."
    echo "  -c                      Use the default configuration file to load selected scripts."
    echo "  --run-script <name>, -r Run the specified script from $SCRIPT_DIR."
    echo "  --list-scripts, -l      List all available scripts in $SCRIPT_DIR."
    echo "  --update                Update Carch using the latest script."
    echo "  --uninstall             Uninstall Carch and remove all associated files."
    echo
}

list_scripts() {
    echo "Available scripts in $SCRIPT_DIR:"
    for script in "$SCRIPT_DIR"/*.sh; do
        echo "  - $(basename "$script" .sh)"
    done
}

exit_with_log_message() {
    echo -e "${YELLOW}Logs have been saved to: ${LOG_FILE}${RESET}"
    log_message "INFO" "Exiting Carch. Logs saved to: ${LOG_FILE}"
    exit 0
}

setup_logging

if [[ $# -gt 0 ]]; then
    case "$1" in
        --help|-h)
            show_help
            ;;
        --version|-v)
            echo "Carch version 4.1.5"
            ;;
        --gen-config)
            generate_config
            ;;
        --config)
            if [[ -n $2 ]]; then
                CONFIG_FILE="$2"
                display_scripts_menu "config"
            else
                echo "Error: --config requires a file path."
                exit 1
            fi
            ;;
        -c)
            display_scripts_menu "config"
            ;;
        --run-script|-r)
            if [[ -n $2 ]]; then
                run_script_direct "$2"
            else
                echo "Error: --run-script requires a script name."
                exit 1
            fi
            ;;
        --list-scripts|-l)
            list_scripts
            ;;
        --update)
            update 
            ;;
        --uninstall)
            uninstall_carch
            ;;
        *)
            echo -e "${YELLOW}Error: Unknown option '$1'. Use --help for usage.${RESET}"
            exit 1
            ;;
    esac
else
    display_scripts_menu
fi
