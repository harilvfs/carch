name: Carch Release
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Install musl-tools and RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools rpm build-essential
        
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
          
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
          
      - name: Install cross-rs for cross-compilation
        run: cargo install cross
        
      - name: Get Latest Release Tag
        id: get_latest
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/harilvfs/carch/releases/latest | jq -r '.tag_name')
          if [[ "$latest_tag" == "null" || -z "$latest_tag" ]]; then
            latest_tag="v4.1.0"
          fi
          major=$(echo "$latest_tag" | cut -d. -f1 | tr -d 'v')
          minor=$(echo "$latest_tag" | cut -d. -f2)
          patch=$(echo "$latest_tag" | cut -d. -f3)
          if [[ $minor -eq 4 && $patch -eq 7 ]]; then
            major=$((major + 1))
            minor=1
            patch=1
          elif [[ $patch -lt 7 ]]; then
            patch=$((patch + 1))
          else
            patch=1
            minor=$((minor + 1))
          fi
          new_tag="v${major}.${minor}.${patch}"
          release_date=$(date +'%Y.%m.%d')
          version="${major}.${minor}.${patch}"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "release_date=$release_date" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_ENV
          
      - name: Build x86_64 binary
        run: cargo build --target-dir=build --release --verbose --target=x86_64-unknown-linux-musl --all-features
        
      - name: Build aarch64 binary
        run: |
          cross build --target-dir=build --release --verbose --target=aarch64-unknown-linux-musl --all-features
          mv ./build/aarch64-unknown-linux-musl/release/carch ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          
      - name: Prepare RPM source package
        run: |
          VERSION=${{ env.version }}
          
          # Create directory structure for RPM build
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          echo "%_topdir $HOME/rpmbuild" > ~/.rpmmacros
          
          # Create source package directory
          mkdir -p carch-${VERSION}/{source/logo,man,completions/{bash,zsh,fish}}
          
          # Copy binary and essential files
          cp ./build/x86_64-unknown-linux-musl/release/carch carch-${VERSION}/
          cp LICENSE carch-${VERSION}/ || touch carch-${VERSION}/LICENSE
          cp README.md carch-${VERSION}/ || echo "# Carch" > carch-${VERSION}/README.md
          
          # Create desktop file
          cat > carch-${VERSION}/carch.desktop << EOF
          [Desktop Entry]
          Name=Carch
          Comment=Rust based archiving tool for personal archives
          Exec=carch
          Icon=carch
          Terminal=true
          Type=Application
          Categories=Utility;
          Version=${VERSION}
          EOF
          
          # Create placeholder man page if it doesn't exist
          if [ ! -f man/carch.1 ]; then
            cat > carch-${VERSION}/man/carch.1 << EOF
          .TH CARCH 1 "$(date '+%B %Y')" "carch ${VERSION}" "User Commands"
          .SH NAME
          carch \- Rust based archiving tool for personal archives
          .SH SYNOPSIS
          .B carch
          [\fIoptions\fR]
          .SH DESCRIPTION
          Carch is a Rust-based archiving tool for personal archives.
          .SH SEE ALSO
          Full documentation at: https://github.com/harilvfs/carch
          EOF
          fi
          
          # Create placeholder bash completion script
          mkdir -p carch-${VERSION}/completions/bash
          echo "# Bash completion for carch" > carch-${VERSION}/completions/bash/carch
          
          # Create placeholder zsh completion script
          mkdir -p carch-${VERSION}/completions/zsh
          echo "# Zsh completion for carch" > carch-${VERSION}/completions/zsh/carch
          
          # Create placeholder fish completion script
          mkdir -p carch-${VERSION}/completions/fish
          echo "# Fish completion for carch" > carch-${VERSION}/completions/fish/carch.fish
          
          # Create placeholder icon files
          mkdir -p carch-${VERSION}/source/logo
          for size in 16 24 32 48 64 128 256; do
            echo "Placeholder for ${size}x${size} icon" > carch-${VERSION}/source/logo/productlogo${size}.png
          done
          
          # Create tarball
          tar -czvf ~/rpmbuild/SOURCES/carch-${VERSION}.tar.gz carch-${VERSION}
          
      - name: Create RPM spec file
        run: |
          VERSION=${{ env.version }}
          cat > ~/rpmbuild/SPECS/carch.spec << EOF
          Name:           carch
          Version:        ${VERSION}
          Release:        1%{?dist}
          Summary:        Rust based archiving tool for personal archives
          License:        GPL
          URL:            https://github.com/harilvfs/%{name}
          Source0:        %{name}-%{version}.tar.gz
          
          Requires:       bash
          Requires:       man-pages
          Requires:       man-db
          Requires:       git
          Requires:       wget
          Requires:       figlet
          Requires:       dnf
          Requires:       unzip
          Requires:       tar
          Requires:       curl
          Requires:       gcc
          Requires:       glibc
          Suggests:       bash-completion-devel
          Suggests:       zsh
          Suggests:       fish
          
          %description
          Carch is a Rust-based archiving tool for personal archives.
          
          %prep
          %setup -q
          
          %install
          mkdir -p %{buildroot}%{_bindir}
          mkdir -p %{buildroot}%{_datadir}/licenses/%{name}
          mkdir -p %{buildroot}%{_datadir}/doc/%{name}
          mkdir -p %{buildroot}%{_datadir}/applications
          mkdir -p %{buildroot}%{_mandir}/man1
          mkdir -p %{buildroot}%{_datadir}/bash-completion/completions
          mkdir -p %{buildroot}%{_datadir}/zsh/site-functions
          mkdir -p %{buildroot}%{_datadir}/fish/vendor_completions.d
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/16x16/apps
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/24x24/apps
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/32x32/apps
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/48x48/apps
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/64x64/apps
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/128x128/apps
          mkdir -p %{buildroot}%{_datadir}/icons/hicolor/256x256/apps
          
          install -Dm755 %{name} %{buildroot}%{_bindir}/%{name}
          install -Dm644 LICENSE %{buildroot}%{_datadir}/licenses/%{name}/LICENSE
          install -Dm644 README.md %{buildroot}%{_datadir}/doc/%{name}/README.md
          install -Dm644 %{name}.desktop %{buildroot}%{_datadir}/applications/%{name}.desktop
          install -Dm644 man/%{name}.1 %{buildroot}%{_mandir}/man1/%{name}.1
          install -Dm644 completions/bash/%{name} %{buildroot}%{_datadir}/bash-completion/completions/%{name}
          install -Dm644 completions/zsh/%{name} %{buildroot}%{_datadir}/zsh/site-functions/_%{name}
          install -Dm644 completions/fish/%{name}.fish %{buildroot}%{_datadir}/fish/vendor_completions.d/%{name}.fish
          
          for size in 16 24 32 48 64 128 256; do
              install -Dm644 source/logo/productlogo\${size}.png %{buildroot}%{_datadir}/icons/hicolor/\${size}x\${size}/apps/%{name}.png
          done
          
          %files
          %license LICENSE
          %doc README.md
          %{_bindir}/%{name}
          %{_datadir}/applications/%{name}.desktop
          %{_mandir}/man1/%{name}.1*
          %{_datadir}/bash-completion/completions/%{name}
          %{_datadir}/zsh/site-functions/_%{name}
          %{_datadir}/fish/vendor_completions.d/%{name}.fish
          %{_datadir}/icons/hicolor/*/apps/%{name}.png
          
          %changelog
          * $(date '+%a %b %d %Y') GitHub Action <github-actions@github.com> - ${VERSION}-1
          - Automated RPM build from GitHub Actions
          EOF
          
      - name: Build RPM package
        run: |
          # Build RPM
          cd ~/rpmbuild/SPECS/
          rpmbuild -ba carch.spec
          
          # Create artifacts directory
          mkdir -p $GITHUB_WORKSPACE/artifacts
          
          # Copy RPMs to artifacts
          find ~/rpmbuild/RPMS/ -name "*.rpm" -exec cp {} $GITHUB_WORKSPACE/artifacts/ \;
          find ~/rpmbuild/SRPMS/ -name "*.rpm" -exec cp {} $GITHUB_WORKSPACE/artifacts/ \;
          
      - name: Generate Release Notes
        id: generate_notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.new_tag }}
          name: ${{ env.new_tag }}@${{ env.release_date }}
          body: |
            ![Downloads x86_64](https://img.shields.io/github/downloads/harilvfs/carch/${{ env.new_tag }}/carch?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29) ![Downloads aarch64](https://img.shields.io/github/downloads/harilvfs/carch/${{ env.new_tag }}/carch-aarch64?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29)

            ## What's Changed
            ${{ steps.generate_notes.outputs.body }}

            **Full Changelog**: https://github.com/harilvfs/carch/compare/${{ env.latest_tag }}...${{ env.new_tag }}
          files: |
            ./build/x86_64-unknown-linux-musl/release/carch
            ./build/aarch64-unknown-linux-musl/release/carch-aarch64
            ./artifacts/*.rpm
