name: Carch Release
on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Version tag (e.g., v1.1.1)'
        required: true
        type: string
      tag_title:
        description: 'Release title (e.g., v1.1.1@Y-M-D)'
        required: true
        type: string
permissions:
  contents: write
jobs:
  update_versions_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up version variables
        run: |
          VERSION=$(echo "${{ github.event.inputs.tag_version }}" | sed 's/^v//')
          CURRENT_MONTH=$(date +'%B')
          CURRENT_YEAR=$(date +'%Y')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$CURRENT_MONTH" >> $GITHUB_ENV
          echo "CURRENT_YEAR=$CURRENT_YEAR" >> $GITHUB_ENV
          
      - name: Update man page version
        run: |
          sed -i "s/\.TH \"carch\" \"1\" \"[^\"]*\" \"Carch [^\"]*\" \"Carch Manual\"/.TH \"carch\" \"1\" \"$CURRENT_MONTH $CURRENT_YEAR\" \"Carch $VERSION\" \"Carch Manual\"/" ./man/carch.1
      
      - name: Update Cargo.toml version
        run: |
          sed -i "s/^version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$VERSION\"/" Cargo.toml
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
          
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-
          
      - name: Run cargo build to update Cargo.lock
        run: cargo build --release
          
      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./man/carch.1 Cargo.toml Cargo.lock
          git commit -m "Update version to $VERSION for release"
          git push
          
      - name: Install musl-tools
        run: sudo apt-get update && sudo apt-get install musl-tools
          
      - name: Install cross-rs for cross-compilation
        run: cargo install cross
        
      - name: Get Latest Release Tag
        id: get_latest
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/harilvfs/carch/releases/latest | jq -r '.tag_name')
          if [[ "$latest_tag" == "null" || -z "$latest_tag" ]]; then
            latest_tag="v4.1.0"
          fi
          release_date=$(date +'%Y.%m.%d')
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "release_date=$release_date" >> $GITHUB_ENV
          
      - name: Build x86_64 binary
        run: cargo build --target-dir=build --release --verbose --target=x86_64-unknown-linux-musl --all-features
        
      - name: Build aarch64 binary
        run: |
          cross build --target-dir=build --release --verbose --target=aarch64-unknown-linux-musl --all-features
          mv ./build/aarch64-unknown-linux-musl/release/carch ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          
      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: |
            ./build/x86_64-unknown-linux-musl/release/carch
            ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          retention-days: 1
          
      - name: Create Release and Generate Notes
        id: create_release_notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag_version }}
          name: ${{ github.event.inputs.tag_title }}
          draft: true
          generate_release_notes: true
          
      - name: Cleanup Release Notes
        id: customize_notes
        run: |
          NOTES=$(gh release view ${{ github.event.inputs.tag_version }} --json body -q '.body')
          
          FILTERED_NOTES=$(echo "$NOTES" | sed -E '/[Pp][Rr][Ee][Vv][Ii][Ee][Ww]/d' | sed -E '/[Cc][Hh][Aa][Nn][Gg][Ee][Ll][Oo][Gg]/d')
          
          FILTERED_NOTES=$(echo "$FILTERED_NOTES" | awk '
          BEGIN { in_section = ""; buffer = ""; }
          /^### (ðŸ“– )?Documentation/ { in_section = "docs"; buffer = $0 "\n"; next; }
          /^### (ðŸ”„ )?Other Changes/ { in_section = "other"; buffer = $0 "\n"; next; }
          /^### / { 
            if (in_section != "") {
              if (buffer ~ /^### (ðŸ“– )?Documentation\n$/ || buffer ~ /^### (ðŸ”„ )?Other Changes\n$/) {
                buffer = "";
              } else {
                printf "%s", buffer;
              }
              in_section = "";
              buffer = "";
            }
            print $0;
            next;
          }
          { 
            if (in_section != "") {
              buffer = buffer $0 "\n";
            } else {
              print $0;
            }
          }
          END {
            if (in_section != "") {
              if (!(buffer ~ /^### (ðŸ“– )?Documentation\n$/ || buffer ~ /^### (ðŸ”„ )?Other Changes\n$/)) {
                printf "%s", buffer;
              }
            }
          }')
          
          echo "$FILTERED_NOTES" > release_notes.md
          
          BADGES="![Downloads x86_64](https://img.shields.io/github/downloads/harilvfs/carch/${{ github.event.inputs.tag_version }}/carch?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29) ![Downloads aarch64](https://img.shields.io/github/downloads/harilvfs/carch/${{ github.event.inputs.tag_version }}/carch-aarch64?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29)\n\n"
          
          echo -e "$BADGES$(cat release_notes.md)" > release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Release with Customized Notes
        run: |
          gh release edit ${{ github.event.inputs.tag_version }} --notes-file release_notes.md
          gh release upload ${{ github.event.inputs.tag_version }} ./build/x86_64-unknown-linux-musl/release/carch ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          gh release edit ${{ github.event.inputs.tag_version }} --draft=false --prerelease=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
