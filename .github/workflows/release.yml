name: Carch Release
on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Version tag (e.g., v5.1.2)'
        required: true
        type: string
      tag_title:
        description: 'Release title'
        required: true
        type: string
permissions:
  contents: write
jobs:
  build_binaries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Install musl-tools
        run: sudo apt-get update && sudo apt-get install musl-tools
        
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
          
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
          
      - name: Install cross-rs for cross-compilation
        run: cargo install cross
          
      - name: Get Latest Release Tag
        id: get_latest
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/harilvfs/carch/releases/latest | jq -r '.tag_name')
          if [[ "$latest_tag" == "null" || -z "$latest_tag" ]]; then
            latest_tag="v4.1.0"
          fi
          release_date=$(date +'%Y.%m.%d')
          VERSION=$(echo "${{ github.event.inputs.tag_version }}" | sed 's/^v//')
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "release_date=$release_date" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Build x86_64 binary
        run: cargo build --target-dir=build --release --verbose --target=x86_64-unknown-linux-musl --all-features
        
      - name: Build aarch64 binary
        run: |
          cross build --target-dir=build --release --verbose --target=aarch64-unknown-linux-musl --all-features
          mv ./build/aarch64-unknown-linux-musl/release/carch ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          
      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: |
            ./build/x86_64-unknown-linux-musl/release/carch
            ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          retention-days: 1
          
      - name: Generate Custom Release Notes
        id: release_notes
        run: |
          PREVIOUS_TAG=${{ env.latest_tag }}
          NEW_TAG=${{ github.event.inputs.tag_version }}
          
          # Initialize categories with emojis
          echo "FEATURES=🚀 Features" >> $GITHUB_ENV
          echo "RUST=🦀 Rust" >> $GITHUB_ENV
          echo "BUGFIXES=🐛 Bug Fixes" >> $GITHUB_ENV
          echo "REFACTOR=🔄 Refactor" >> $GITHUB_ENV
          echo "UPDATES=🔼 Updates" >> $GITHUB_ENV
          echo "BUILD=🛠️ Build" >> $GITHUB_ENV
          echo "TEST=🧪 Test" >> $GITHUB_ENV
          echo "REMOVE=📝 Remove" >> $GITHUB_ENV
          echo "CUSTOM=🔧 Custom" >> $GITHUB_ENV
          echo "UIUX=🎨 UI/UX" >> $GITHUB_ENV
          echo "DOCS=📖 Docs" >> $GITHUB_ENV
          echo "OTHER=Other Changes" >> $GITHUB_ENV
          
          # Initialize empty arrays for each category
          echo "features_list=()" >> $GITHUB_ENV
          echo "rust_list=()" >> $GITHUB_ENV
          echo "bugfixes_list=()" >> $GITHUB_ENV
          echo "refactor_list=()" >> $GITHUB_ENV
          echo "updates_list=()" >> $GITHUB_ENV
          echo "build_list=()" >> $GITHUB_ENV
          echo "test_list=()" >> $GITHUB_ENV
          echo "remove_list=()" >> $GITHUB_ENV
          echo "custom_list=()" >> $GITHUB_ENV
          echo "uiux_list=()" >> $GITHUB_ENV
          echo "docs_list=()" >> $GITHUB_ENV
          echo "other_list=()" >> $GITHUB_ENV
          
          # Function to categorize a commit/PR
          categorize() {
            local message="$1"
            local author="$2"
            local number="$3"
            local is_pr="$4"
            
            # Clean up message (first line only, remove prefixes)
            clean_message=$(echo "$message" | head -n1 | sed 's/^.*: //')
            
            # Format the line depending on whether it's a PR or commit
            if [ "$is_pr" = "true" ]; then
              formatted_item="- $clean_message @$author (#$number)"
            else
              # For commits, use shortened commit hash
              formatted_item="- $clean_message @$author (\`${number:0:7}\`)"
            fi
            
            # Categorize based on prefixes
            if [[ "$message" =~ ^feat(\(.*\))?:|\(feature\):|\(perf\):|\(performance\): ]]; then
              features_list+=("$formatted_item")
            elif [[ "$message" =~ ^rust(\(.*\))?:|\(rust\): ]]; then
              rust_list+=("$formatted_item")
            elif [[ "$message" =~ ^fix(\(.*\))?:|\(fix\):|\(bug\):|\(bugfix\): ]]; then
              bugfixes_list+=("$formatted_item")
            elif [[ "$message" =~ ^refactor(\(.*\))?:|\(refactor\): ]]; then
              refactor_list+=("$formatted_item")
            elif [[ "$message" =~ ^update(\(.*\))?:|\(update\):|\(upgrade\): ]]; then
              updates_list+=("$formatted_item")
            elif [[ "$message" =~ ^build(\(.*\))?:|\(build\):|\(deps\):|\(dependencies\):|\(chore\): ]]; then
              build_list+=("$formatted_item")
            elif [[ "$message" =~ ^test(\(.*\))?:|\(test\):|\(tests\): ]]; then
              test_list+=("$formatted_item")
            elif [[ "$message" =~ ^remove(\(.*\))?:|\(remove\):|\(delete\): ]]; then
              remove_list+=("$formatted_item")
            elif [[ "$message" =~ ^custom(\(.*\))?:|\(custom\): ]]; then
              custom_list+=("$formatted_item")
            elif [[ "$message" =~ ^ui(\(.*\))?:|\(ui\):|\(ux\):|\(UI\):|\(UX\): ]]; then
              uiux_list+=("$formatted_item")
            elif [[ "$message" =~ ^doc(\(.*\))?:|\(doc\):|\(docs\):|\(documentation\): ]]; then
              docs_list+=("$formatted_item")
            else
              other_list+=("$formatted_item")
            fi
          }
          
          echo "Processing commits between $PREVIOUS_TAG and $NEW_TAG"
          
          # Get all commits
          git fetch --tags
          COMMITS=$(git log --no-merges --pretty=format:"%h|||%an|||%s" $PREVIOUS_TAG..$NEW_TAG)
          
          # Process commits
          while IFS= read -r commit_line; do
            if [ -n "$commit_line" ]; then
              IFS="|||" read -r hash author message <<< "$commit_line"
              categorize "$message" "$author" "$hash" "false"
            fi
          done <<< "$COMMITS"
          
          # Get merged PRs using GitHub API
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc&per_page=100")
          
          # Process PRs that were merged between the tags
          echo "$PR_DATA" | jq -c '.[]' | while read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_title=$(echo "$pr" | jq -r '.title')
            pr_author=$(echo "$pr" | jq -r '.user.login')
            merge_commit_sha=$(echo "$pr" | jq -r '.merge_commit_sha')
            merged_at=$(echo "$pr" | jq -r '.merged_at')
            
            # Skip if not merged
            if [ "$merged_at" = "null" ]; then
              continue
            fi
            
            # Check if PR was merged between the tags
            if git merge-base --is-ancestor "$merge_commit_sha" "$NEW_TAG" && \
               ! git merge-base --is-ancestor "$merge_commit_sha" "$PREVIOUS_TAG"; then
              categorize "$pr_title" "$pr_author" "$pr_number" "true"
            fi
          done
          
          # Create release notes content
          RELEASE_NOTES="## What's Changed\n\n"
          
          # Add each category if it has items
          add_category() {
            local title="$1"
            local items=("${@:2}")
            if [ ${#items[@]} -gt 0 ]; then
              RELEASE_NOTES+="### $title\n\n"
              for item in "${items[@]}"; do
                RELEASE_NOTES+="$item\n"
              done
              RELEASE_NOTES+="\n"
            fi
          }
          
          # Add each category to the release notes
          add_category "$FEATURES" "${features_list[@]}"
          add_category "$RUST" "${rust_list[@]}"
          add_category "$BUGFIXES" "${bugfixes_list[@]}"
          add_category "$REFACTOR" "${refactor_list[@]}"
          add_category "$UPDATES" "${updates_list[@]}"
          add_category "$BUILD" "${build_list[@]}"
          add_category "$TEST" "${test_list[@]}"
          add_category "$REMOVE" "${remove_list[@]}"
          add_category "$CUSTOM" "${custom_list[@]}"
          add_category "$UIUX" "${uiux_list[@]}"
          add_category "$DOCS" "${docs_list[@]}"
          add_category "$OTHER" "${other_list[@]}"
          
          # Create multiline output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag_version }}
          name: ${{ github.event.inputs.tag_title }}
          body: |
            ![Downloads x86_64](https://img.shields.io/github/downloads/harilvfs/carch/${{ github.event.inputs.tag_version }}/carch?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29) ![Downloads aarch64](https://img.shields.io/github/downloads/harilvfs/carch/${{ github.event.inputs.tag_version }}/carch-aarch64?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29) ![Downloads RPM](https://img.shields.io/github/downloads/harilvfs/carch/${{ github.event.inputs.tag_version }}/carch-${{ env.VERSION }}-1.fc41.x86_64.rpm?color=%235E81AC&style=for-the-badge&logoColor=85e185&labelColor=1c1c29)

            ${{ env.RELEASE_NOTES }}
            **Full Changelog**: https://github.com/harilvfs/carch/compare/${{ env.latest_tag }}...${{ github.event.inputs.tag_version }}
          files: |
            ./build/x86_64-unknown-linux-musl/release/carch
            ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          draft: false

  build_rpm:
    needs: build_binaries
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          dnf -y update
          dnf -y install \
            git curl wget figlet man-db bash rust cargo gcc \
            glibc unzip tar google-noto-color-emoji-fonts google-noto-emoji-fonts \
            jetbrains-mono-fonts-all bat bash-completion-devel zsh fish \
            rpmdevtools rpmlint fzf
            
      - name: Setup RPM build environment
        run: |
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
          rpmdev-setuptree
          
      - name: Download spec file
        run: |
          curl -sL "https://raw.githubusercontent.com/harilvfs/carch/refs/heads/main/platforms/fedora/carch.spec" -o ~/rpmbuild/SPECS/carch.spec
          
      - name: Modify spec file to fix Cargo build
        run: |
          sed -i 's/cargo build --frozen/cargo fetch \&\& cargo build/g' ~/rpmbuild/SPECS/carch.spec
          echo "Modified spec file to allow dependency downloads"
          grep "cargo build" ~/rpmbuild/SPECS/carch.spec
          
      - name: Download source
        run: |
          cd ~/rpmbuild/SPECS
          spectool -g -R carch.spec
          
      - name: Build RPM package
        run: |
          cd ~/rpmbuild/SPECS
          rpmbuild -ba carch.spec
          
      - name: Find built RPM
        id: find_rpm
        run: |
          RPM_PATH=$(find ~/rpmbuild/RPMS -name "carch-*.x86_64.rpm" | grep -v "debug" | head -n 1)
          if [ -z "$RPM_PATH" ]; then
            echo "Error: Could not find the Carch RPM file"
            exit 1
          fi
          echo "Found RPM at: $RPM_PATH"
          echo "rpm_path=$RPM_PATH" >> $GITHUB_OUTPUT
          mkdir -p ./artifacts
          cp $RPM_PATH ./artifacts/
          ls -la ./artifacts/
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: carch-rpm
          path: ./artifacts/*.rpm
          retention-days: 7
            
      - name: Upload RPM
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*.rpm
          tag_name: ${{ github.event.inputs.tag_version }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
