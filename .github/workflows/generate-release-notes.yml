name: Release Notes

on:
  push:
    branches:
      - main
      - master

jobs:
  release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v6
        id: release-drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Generate commit notes
        run: |
          # Create scripts directory if it doesn't exist
          mkdir -p scripts
          
          # Create the script file
          cat > scripts/conventional-commits-parser.js << 'EOL'
          #!/usr/bin/env node
          const { execSync } = require('child_process');
          const fs = require('fs');

          // Configuration for commit types and their corresponding emoji/category
          const COMMIT_TYPES = {
            feat: { emoji: '🚀', title: 'Features' },
            fix: { emoji: '🐛', title: 'Bug Fixes' },
            docs: { emoji: '📖', title: 'Documentation' },
            style: { emoji: '🎨', title: 'Styling' },
            refactor: { emoji: '🔄', title: 'Refactoring' },
            perf: { emoji: '⚡', title: 'Performance' },
            test: { emoji: '🧪', title: 'Tests' },
            build: { emoji: '🛠️', title: 'Build' },
            ci: { emoji: '⚙️', title: 'CI/CD' },
            chore: { emoji: '🧰', title: 'Chores' },
            revert: { emoji: '↩️', title: 'Reverts' },
            init: { emoji: '🎬', title: 'Initial' },
            wip: { emoji: '🚧', title: 'Work In Progress' },
            security: { emoji: '🔒', title: 'Security' },
            infra: { emoji: '🏗️', title: 'Infrastructure' },
            db: { emoji: '🗃️', title: 'Database' },
            rust: { emoji: '🦀', title: 'Rust' }
          };

          // Helper function to get tag name
          function getLatestTag() {
            try {
              return execSync('git describe --tags --abbrev=0').toString().trim();
            } catch (error) {
              return null;
            }
          }

          // Get all commits since last tag or from beginning if no tags
          function getCommits() {
            const latestTag = getLatestTag();
            const range = latestTag ? `${latestTag}..HEAD` : '';
            
            // Format: hash|author|date|subject
            const command = `git log ${range} --pretty=format:"%h|%an|%ad|%s" --date=short`;
            const output = execSync(command).toString().trim();
            
            if (!output) return [];
            
            return output.split('\n').map(line => {
              const [hash, author, date, subject] = line.split('|');
              return { hash, author, date, subject };
            });
          }

          // Parse commit messages to categorize them
          function categorizeCommits(commits) {
            const categories = {};
            
            // Initialize categories
            Object.keys(COMMIT_TYPES).forEach(type => {
              categories[type] = [];
            });
            
            // Special category for uncategorized commits
            categories.other = [];
            
            commits.forEach(commit => {
              const { hash, author, date, subject } = commit;
              
              // Try to match conventional commit format: type(scope): message
              const match = subject.match(/^(\w+)(\([\w-]+\))?:\s*(.+)$/);
              
              if (match) {
                const [, type, , message] = match;
                if (categories[type]) {
                  categories[type].push({ hash, author, date, subject });
                } else {
                  categories.other.push({ hash, author, date, subject });
                }
              } else {
                categories.other.push({ hash, author, date, subject });
              }
            });
            
            return categories;
          }

          // Generate markdown for release notes
          function generateReleaseNotes(categories) {
            let markdown = '## Direct Commits\n\n';
            
            // Add categories
            Object.keys(COMMIT_TYPES).forEach(type => {
              if (categories[type] && categories[type].length > 0) {
                markdown += `### ${COMMIT_TYPES[type].emoji} ${COMMIT_TYPES[type].title}\n\n`;
                
                categories[type].forEach(commit => {
                  markdown += `- ${commit.subject} ([${commit.hash}](https://github.com/$GITHUB_REPOSITORY/commit/${commit.hash})) - ${commit.author}\n`;
                });
                
                markdown += '\n';
              }
            });
            
            // Add uncategorized commits if any
            if (categories.other.length > 0) {
              markdown += `### 📋 Other Changes\n\n`;
              categories.other.forEach(commit => {
                markdown += `- ${commit.subject} ([${commit.hash}](https://github.com/$GITHUB_REPOSITORY/commit/${commit.hash})) - ${commit.author}\n`;
              });
              markdown += '\n';
            }
            
            return markdown;
          }

          // Main function
          function main() {
            console.log('Generating release notes from conventional commits...');
            
            const commits = getCommits();
            const categories = categorizeCommits(commits);
            const releaseNotes = generateReleaseNotes(categories);
            
            // Write to file
            fs.writeFileSync('COMMIT_NOTES.md', releaseNotes);
            
            console.log('Commit notes generated successfully and saved to COMMIT_NOTES.md');
          }

          main();
          EOL
          
          # Make the script executable
          chmod +x scripts/conventional-commits-parser.js
          
          # Run the script
          node scripts/conventional-commits-parser.js
          
          # Create combined release notes
          echo "${{ steps.release-drafter.outputs.body }}" > COMBINED_NOTES.md
          cat COMMIT_NOTES.md >> COMBINED_NOTES.md
      
      - name: Update draft release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          body_path: COMBINED_NOTES.md
          tag_name: ${{ steps.release-drafter.outputs.tag_name || format('v{0}', github.run_number) }}
          name: ${{ steps.release-drafter.outputs.name || format('Release v{0}', github.run_number) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
