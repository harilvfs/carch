name: Generate Custom Badges

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *' 

jobs:
  generate-badges:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install -g d3 jsdom
      
      - name: Generate badges
        id: badges
        run: |
          mkdir -p .github/badges
          
          cat > generate-badges.js << 'EOF'
          const fs = require('fs');
          const { execSync } = require('child_process');
          const { JSDOM } = require('jsdom');
          const d3 = require('d3');
          
          function runCommand(command) {
            try {
              return execSync(command).toString().trim();
            } catch (error) {
              return null;
            }
          }
          
          const workflowStatus = process.env.GITHUB_ACTIONS ? "success" : "unknown";
          
          const languageData = {};
          const files = runCommand('git ls-files').split('\n');
          const extensions = {};
          
          files.forEach(file => {
            const ext = file.split('.').pop();
            if (ext) {
              extensions[ext] = (extensions[ext] || 0) + 1;
            }
          });
          
          const shCount = extensions.sh || 0;
          const rsCount = extensions.rs || 0;
          
          const totalCommits = runCommand('git rev-list --count HEAD');
          const contributors = runCommand('git log --format=\'%ae\' | sort -u | wc -l');
          const lastActive = runCommand('git log -1 --format=%cr');
          
          const { window } = new JSDOM('<!DOCTYPE html><html><body></body></html>');
          const body = d3.select(window.document.body);
          
          const width = 400;
          const height = 180;
          const svg = body.append('svg')
            .attr('xmlns', 'http://www.w3.org/2000/svg')
            .attr('width', width)
            .attr('height', height)
            .attr('viewBox', `0 0 ${width} ${height}`);
          
          const defs = svg.append('defs');
          
          const gradient = defs.append('linearGradient')
            .attr('id', 'glassGradient')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '0%')
            .attr('y2', '100%');
          
          gradient.append('stop')
            .attr('offset', '0%')
            .attr('stop-color', 'rgba(255, 255, 255, 0.5)');
          
          gradient.append('stop')
            .attr('offset', '100%')
            .attr('stop-color', 'rgba(255, 255, 255, 0.1)');
          
          const filter = defs.append('filter')
            .attr('id', 'shadow')
            .attr('x', '-20%')
            .attr('y', '-20%')
            .attr('width', '140%')
            .attr('height', '140%');
          
          filter.append('feGaussianBlur')
            .attr('in', 'SourceAlpha')
            .attr('stdDeviation', '3')
            .attr('result', 'blur');
          
          filter.append('feOffset')
            .attr('in', 'blur')
            .attr('dx', '0')
            .attr('dy', '3')
            .attr('result', 'offsetBlur');
          
          const feComponentTransfer = filter.append('feComponentTransfer')
            .attr('in', 'offsetBlur')
            .attr('result', 'lightenedBlur');
          
          feComponentTransfer.append('feFuncA')
            .attr('type', 'linear')
            .attr('slope', '0.3');
          
          const feMerge = filter.append('feMerge');
          feMerge.append('feMergeNode')
            .attr('in', 'lightenedBlur');
          feMerge.append('feMergeNode')
            .attr('in', 'SourceGraphic');
          
          svg.append('rect')
            .attr('x', 10)
            .attr('y', 10)
            .attr('width', width - 20)
            .attr('height', height - 20)
            .attr('rx', 15)
            .attr('ry', 15)
            .attr('fill', 'url(#glassGradient)')
            .attr('stroke', '#ffffff')
            .attr('stroke-width', 1)
            .attr('filter', 'url(#shadow)')
            .attr('opacity', 0.9);
          
          svg.append('path')
            .attr('d', `M 25 10 
                       Q 15 10, 15 25 
                       L 15 50 
                       Q 40 65, 100 60 
                       L 350 60 
                       Q 375 58, 380 40 
                       L 380 25 
                       Q 380 10, 365 10 
                       Z`)
            .attr('fill', 'rgba(255, 255, 255, 0.4)')
            .attr('stroke', 'none');
          
          const g = svg.append('g')
            .attr('font-family', 'Arial, sans-serif');
          
          const statusColor = workflowStatus === "success" ? "#4CAF50" : "#F44336";
          g.append('circle')
            .attr('cx', 30)
            .attr('cy', 40)
            .attr('r', 8)
            .attr('fill', statusColor);
          
          g.append('text')
            .attr('x', 45)
            .attr('y', 44)
            .attr('fill', '#333')
            .attr('font-size', 14)
            .text(`Status: ${workflowStatus}`);
          
          g.append('text')
            .attr('x', 30)
            .attr('y', 74)
            .attr('fill', '#333')
            .attr('font-size', 14)
            .text(`Files: ${shCount} .sh / ${rsCount} .rs`);
          
          const topLangs = Object.entries(extensions)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 3)
            .map(([ext, count]) => `${ext}: ${count}`)
            .join(", ");
          
          g.append('text')
            .attr('x', 30)
            .attr('y', 104)
            .attr('fill', '#333')
            .attr('font-size', 14)
            .text(`Top extensions: ${topLangs}`);
          
          g.append('text')
            .attr('x', 30)
            .attr('y', 134)
            .attr('fill', '#333')
            .attr('font-size', 14)
            .text(`Activity: ${totalCommits} commits, ${contributors} contributors`);
          
          g.append('text')
            .attr('x', 30)
            .attr('y', 164)
            .attr('fill', '#333')
            .attr('font-size', 14)
            .text(`Last active: ${lastActive}`);
          
          fs.writeFileSync('.github/badges/repo-status.svg', window.document.body.innerHTML);
          EOF
          
          node generate-badges.js
          
          echo "Badges generated successfully"
      
      - name: Deploy badges to badges branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git checkout -b badges || git checkout badges
          
          git add .github/badges/
          git commit -m "Update repository badges" || echo "No changes to commit"
          
          git push -f origin badges

