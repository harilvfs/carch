name: Generate Custom Badges

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *'

jobs:
  generate-badges:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install d3 jsdom
          npm pkg set type=module
      
      - name: Generate badges
        id: badges
        run: |
          mkdir -p .github/badges
          
          cat > generate-badges.js << 'EOF'
          import fs from 'fs';
          import { execSync } from 'child_process';
          import { JSDOM } from 'jsdom';
          import * as d3 from 'd3';

          function runCommand(command) {
            try {
              return execSync(command).toString().trim();
            } catch (error) {
              return null;
            }
          }

          const ciStatus = process.env.GITHUB_ACTIONS ? "passing" : "unknown";
          const files = runCommand('git ls-files').split('\n');
          const extensions = {};

          files.forEach(file => {
            const ext = file.split('.').pop();
            if (ext) {
              extensions[ext] = (extensions[ext] || 0) + 1;
            }
          });

          const shCount = extensions.sh || 0;
          const rsCount = extensions.rs || 0;
          const totalCommits = runCommand('git rev-list --count HEAD');
          const contributors = runCommand('git log --format=\'%ae\' | sort -u | wc -l');
          const lastActive = runCommand('git log -1 --format=%cr');

          const { window } = new JSDOM('<!DOCTYPE html><html><body></body></html>');
          const body = d3.select(window.document.body);

          const width = 400;
          const height = 180;

          const svg = body.append('svg')
            .attr('xmlns', 'http://www.w3.org/2000/svg')
            .attr('width', width)
            .attr('height', height)
            .attr('viewBox', `0 0 ${width} ${height}`);

          const defs = svg.append('defs');

          const bgGradient = defs.append('linearGradient')
            .attr('id', 'backgroundGradient')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '100%')
            .attr('y2', '100%');

          bgGradient.append('stop')
            .attr('offset', '0%')
            .attr('stop-color', '#2c3e50');

          bgGradient.append('stop')
            .attr('offset', '100%')
            .attr('stop-color', '#1a2533');

          const headerGradient = defs.append('linearGradient')
            .attr('id', 'headerGradient')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '100%')
            .attr('y2', '0%');

          headerGradient.append('stop')
            .attr('offset', '0%')
            .attr('stop-color', '#3498db');

          headerGradient.append('stop')
            .attr('offset', '100%')
            .attr('stop-color', '#2980b9');

          const passingGradient = defs.append('linearGradient')
            .attr('id', 'passingGradient')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '0%')
            .attr('y2', '100%');

          passingGradient.append('stop')
            .attr('offset', '0%')
            .attr('stop-color', '#27ae60');

          passingGradient.append('stop')
            .attr('offset', '100%')
            .attr('stop-color', '#2ecc71');

          const unknownGradient = defs.append('linearGradient')
            .attr('id', 'unknownGradient')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '0%')
            .attr('y2', '100%');

          unknownGradient.append('stop')
            .attr('offset', '0%')
            .attr('stop-color', '#f39c12');

          unknownGradient.append('stop')
            .attr('offset', '100%')
            .attr('stop-color', '#e67e22');

          const filter = defs.append('filter')
            .attr('id', 'dropShadow')
            .attr('x', '-20%')
            .attr('y', '-20%')
            .attr('width', '140%')
            .attr('height', '140%');

          filter.append('feGaussianBlur')
            .attr('in', 'SourceAlpha')
            .attr('stdDeviation', '3')
            .attr('result', 'blur');

          filter.append('feOffset')
            .attr('in', 'blur')
            .attr('dx', '0')
            .attr('dy', '2')
            .attr('result', 'offsetBlur');

          const feComponentTransfer = filter.append('feComponentTransfer')
            .attr('in', 'offsetBlur')
            .attr('result', 'lightenedBlur');

          feComponentTransfer.append('feFuncA')
            .attr('type', 'linear')
            .attr('slope', '0.3');

          const feMerge = filter.append('feMerge');
          feMerge.append('feMergeNode')
            .attr('in', 'lightenedBlur');
          feMerge.append('feMergeNode')
            .attr('in', 'SourceGraphic');

          svg.append('rect')
            .attr('x', 10)
            .attr('y', 10)
            .attr('width', width - 20)
            .attr('height', height - 20)
            .attr('rx', 8)
            .attr('ry', 8)
            .attr('fill', 'url(#backgroundGradient)')
            .attr('filter', 'url(#dropShadow)');

          svg.append('rect')
            .attr('x', 10)
            .attr('y', 10)
            .attr('width', width - 20)
            .attr('height', 40)
            .attr('rx', 8)
            .attr('ry', 8)
            .attr('fill', 'url(#headerGradient)');

          svg.append('rect')
            .attr('x', 10)
            .attr('y', 30)
            .attr('width', width - 20)
            .attr('height', 20)
            .attr('fill', 'url(#headerGradient)');

          svg.append('text')
            .attr('x', width / 2)
            .attr('y', 34)
            .attr('text-anchor', 'middle')
            .attr('font-family', 'Arial, sans-serif')
            .attr('font-weight', 'bold')
            .attr('font-size', 18)
            .attr('fill', 'white')
            .text('Repository Status');

          const statusBadgeWidth = 90;
          const statusBadgeHeight = 26;
          const statusBadgeX = width - statusBadgeWidth - 20;
          const statusBadgeY = 64;

          svg.append('rect')
            .attr('x', statusBadgeX)
            .attr('y', statusBadgeY)
            .attr('width', statusBadgeWidth)
            .attr('height', statusBadgeHeight)
            .attr('rx', 13)
            .attr('ry', 13)
            .attr('fill', ciStatus === "passing" ? 'url(#passingGradient)' : 'url(#unknownGradient)')
            .attr('filter', 'url(#dropShadow)');

          svg.append('text')
            .attr('x', statusBadgeX + statusBadgeWidth / 2)
            .attr('y', statusBadgeY + statusBadgeHeight / 2 + 5)
            .attr('text-anchor', 'middle')
            .attr('font-family', 'Arial, sans-serif')
            .attr('font-weight', 'bold')
            .attr('font-size', 14)
            .attr('fill', 'white')
            .text(ciStatus);

          svg.append('text')
            .attr('x', statusBadgeX - 10)
            .attr('y', statusBadgeY + statusBadgeHeight / 2 + 5)
            .attr('text-anchor', 'end')
            .attr('font-family', 'Arial, sans-serif')
            .attr('font-size', 14)
            .attr('font-weight', 'bold')
            .attr('fill', 'white')
            .text('CI Status:');

          const infoGroup = svg.append('g')
            .attr('font-family', 'Arial, sans-serif')
            .attr('fill', 'white');

          infoGroup.append('text')
            .attr('x', 30)
            .attr('y', 95)
            .attr('font-size', 14)
            .text(`Files: ${shCount} .sh / ${rsCount} .rs`);

          const topLangs = Object.entries(extensions)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 3)
            .map(([ext, count]) => `${ext}: ${count}`)
            .join(", ");

          infoGroup.append('text')
            .attr('x', 30)
            .attr('y', 118)
            .attr('font-size', 14)
            .text(`Top extensions: ${topLangs}`);

          infoGroup.append('text')
            .attr('x', 30)
            .attr('y', 141)
            .attr('font-size', 14)
            .text(`Activity: ${totalCommits} commits`);
            
          infoGroup.append('text')
            .attr('x', 30)
            .attr('y', 164)
            .attr('font-size', 14)
            .text(`Contributors: ${contributors}`);

          infoGroup.append('text')
            .attr('x', 30)
            .attr('y', 164 + 23)
            .attr('font-size', 14)
            .text(`Last active: ${lastActive}`);

          fs.writeFileSync('.github/badges/repo-status.svg', window.document.body.innerHTML);
          console.log("repository badge generated successfully");
          EOF
          
          node generate-badges.js
          
          echo "Badges generated successfully"
      
      - name: Deploy badges to badges branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git checkout -b badges || git checkout badges
          
          git add .github/badges/
          git commit -m "Update repository badges" || echo "No changes to commit"
          
          git push -f origin badges
