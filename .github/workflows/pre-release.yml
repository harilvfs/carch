name: Carch Release
name: Carch Release
on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Version tag (e.g., v1.1.1)'
        required: true
        type: string
      tag_title:
        description: 'Release title (e.g., v1.1.1@Y-M-D)'
        required: true
        type: string
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up version variables
        run: |
          VERSION=$(echo "${{ github.event.inputs.tag_version }}" | sed 's/^v//')
          CURRENT_MONTH=$(date +'%B')
          CURRENT_YEAR=$(date +'%Y')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "CURRENT_MONTH=$CURRENT_MONTH" >> $GITHUB_ENV
          echo "CURRENT_YEAR=$CURRENT_YEAR" >> $GITHUB_ENV
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
          
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install musl-tools
        run: sudo apt-get update && sudo apt-get install musl-tools

      - name: Install cross-rs for cross-compilation
        run: cargo install cross

      - name: Get Latest Release Tag
        id: get_latest
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/harilvfs/carch/releases/latest | jq -r '.tag_name')
          if [[ "$latest_tag" == "null" || -z "$latest_tag" ]]; then
            latest_tag="v4.1.0"
          fi
          release_date=$(date +'%Y.%m.%d')
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "release_date=$release_date" >> $GITHUB_ENV

      - name: Build x86_64 binary
        run: cargo build --target-dir=build --release --verbose --target=x86_64-unknown-linux-musl --all-features

      - name: Build aarch64 binary
        run: |
          cross build --target-dir=build --release --verbose --target=aarch64-unknown-linux-musl --all-features
          mv ./build/aarch64-unknown-linux-musl/release/carch ./build/aarch64-unknown-linux-musl/release/carch-aarch64

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binaries
          path: |
            ./build/x86_64-unknown-linux-musl/release/carch
            ./build/aarch64-unknown-linux-musl/release/carch-aarch64
          retention-days: 1

      - name: Install git-cliff
        run: |
          curl -sSfL https://github.com/orhun/git-cliff/releases/latest/download/git-cliff-linux-amd64.tar.gz | tar -xz -C /usr/local/bin git-cliff
          chmod +x /usr/local/bin/git-cliff
          git-cliff --version

      - name: Generate changelog with git-cliff
        id: generate_changelog
        run: |
          git-cliff --config git-cliff.toml --tag ${{ github.event.inputs.tag_version }} > changelog.md
          cat changelog.md

      - name: Create Release with git-cliff notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag_version }}
          name: ${{ github.event.inputs.tag_title }}
          draft: false
          generate_release_notes: false
          body_path: changelog.md

      - name: Upload binaries to Release
        run: |
          gh release upload ${{ github.event.inputs.tag_version }} ./build/x86_64-unknown-linux-musl/release/carch ./build/aarch64-unknown-linux-musl/release/carch-aarch64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
