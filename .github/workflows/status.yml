name: CI Status 

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  check-status:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Check workflow status
        id: check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              status: 'completed',
              per_page: 100
            });
            
            const filteredRuns = workflowRuns.data.workflow_runs.filter(run => 
              run.name !== 'CI Status Badge'
            );
            
            if (filteredRuns.length === 0) {
              core.setOutput('status', 'unknown');
              return;
            }
            
            const failedRuns = filteredRuns.filter(run => run.conclusion === 'failure');
            
            if (failedRuns.length > 0) {
              core.setOutput('status', 'failing');
              console.log('CI status: FAILING');
            } else {
              core.setOutput('status', 'passing');
              console.log('CI status: PASSING');
            }
      
      - name: Create status badge
        if: always()
        run: |
          STATUS="${{ steps.check.outputs.status }}"
          
          if [ "$STATUS" = "passing" ]; then
            echo "Creating passing badge"
            echo '{"schemaVersion":1,"label":"CI","message":"passing","color":"success"}' > status.json
          elif [ "$STATUS" = "failing" ]; then
            echo "Creating failing badge"
            echo '{"schemaVersion":1,"label":"CI","message":"failing","color":"critical"}' > status.json
          else
            echo "Creating unknown badge"
            echo '{"schemaVersion":1,"label":"CI","message":"unknown","color":"inactive"}' > status.json
          fi
      
      - name: Upload status badge
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: status-badge
          path: status.json
          
      - name: Deploy badge to GitHub Pages
        if: always() && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: .
          target-folder: badges
          clean: false
          clean-exclude: |
            badges/status.json
          files: status.json
